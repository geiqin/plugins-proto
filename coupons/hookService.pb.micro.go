// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: hookService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for HookService service

func NewHookServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for HookService service

type HookService interface {
	//商品页面优惠券
	GoodsDetailCoupon(ctx context.Context, in *HookRequest, opts ...client.CallOption) (*GoodsDetailCouponResponse, error)
	//购买确认页面优惠券选择
	BuyUserCoupon(ctx context.Context, in *HookRequest, opts ...client.CallOption) (*BuyUserCouponResponse, error)
}

type hookService struct {
	c    client.Client
	name string
}

func NewHookService(name string, c client.Client) HookService {
	return &hookService{
		c:    c,
		name: name,
	}
}

func (c *hookService) GoodsDetailCoupon(ctx context.Context, in *HookRequest, opts ...client.CallOption) (*GoodsDetailCouponResponse, error) {
	req := c.c.NewRequest(c.name, "HookService.GoodsDetailCoupon", in)
	out := new(GoodsDetailCouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hookService) BuyUserCoupon(ctx context.Context, in *HookRequest, opts ...client.CallOption) (*BuyUserCouponResponse, error) {
	req := c.c.NewRequest(c.name, "HookService.BuyUserCoupon", in)
	out := new(BuyUserCouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HookService service

type HookServiceHandler interface {
	//商品页面优惠券
	GoodsDetailCoupon(context.Context, *HookRequest, *GoodsDetailCouponResponse) error
	//购买确认页面优惠券选择
	BuyUserCoupon(context.Context, *HookRequest, *BuyUserCouponResponse) error
}

func RegisterHookServiceHandler(s server.Server, hdlr HookServiceHandler, opts ...server.HandlerOption) error {
	type hookService interface {
		GoodsDetailCoupon(ctx context.Context, in *HookRequest, out *GoodsDetailCouponResponse) error
		BuyUserCoupon(ctx context.Context, in *HookRequest, out *BuyUserCouponResponse) error
	}
	type HookService struct {
		hookService
	}
	h := &hookServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&HookService{h}, opts...))
}

type hookServiceHandler struct {
	HookServiceHandler
}

func (h *hookServiceHandler) GoodsDetailCoupon(ctx context.Context, in *HookRequest, out *GoodsDetailCouponResponse) error {
	return h.HookServiceHandler.GoodsDetailCoupon(ctx, in, out)
}

func (h *hookServiceHandler) BuyUserCoupon(ctx context.Context, in *HookRequest, out *BuyUserCouponResponse) error {
	return h.HookServiceHandler.BuyUserCoupon(ctx, in, out)
}
