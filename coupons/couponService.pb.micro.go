// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: couponService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CouponService service

func NewCouponServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CouponService service

type CouponService interface {
	//创建优惠劵
	Create(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
	//修改优惠劵
	Update(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
	//删除优惠券
	Delete(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
	//状态更新
	UpdateStatus(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
	//获得优惠劵详情
	Detail(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error)
	//所有优惠劵查询
	Search(ctx context.Context, in *CouponRequest, opts ...client.CallOption) (*CouponResponse, error)
	//优惠劵中心
	Index(ctx context.Context, in *CouponRequest, opts ...client.CallOption) (*CouponResponse, error)
	//优惠劵领取
	Receive(ctx context.Context, in *CouponRequest, opts ...client.CallOption) (*CouponResponse, error)
	//优惠劵发送
	Send(ctx context.Context, in *CouponSendRequest, opts ...client.CallOption) (*CouponResponse, error)
}

type couponService struct {
	c    client.Client
	name string
}

func NewCouponService(name string, c client.Client) CouponService {
	return &couponService{
		c:    c,
		name: name,
	}
}

func (c *couponService) Create(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.Create", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponService) Update(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.Update", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponService) Delete(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.Delete", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponService) UpdateStatus(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.UpdateStatus", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponService) Detail(ctx context.Context, in *Coupon, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.Detail", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponService) Search(ctx context.Context, in *CouponRequest, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.Search", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponService) Index(ctx context.Context, in *CouponRequest, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.Index", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponService) Receive(ctx context.Context, in *CouponRequest, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.Receive", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponService) Send(ctx context.Context, in *CouponSendRequest, opts ...client.CallOption) (*CouponResponse, error) {
	req := c.c.NewRequest(c.name, "CouponService.Send", in)
	out := new(CouponResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CouponService service

type CouponServiceHandler interface {
	//创建优惠劵
	Create(context.Context, *Coupon, *CouponResponse) error
	//修改优惠劵
	Update(context.Context, *Coupon, *CouponResponse) error
	//删除优惠券
	Delete(context.Context, *Coupon, *CouponResponse) error
	//状态更新
	UpdateStatus(context.Context, *Coupon, *CouponResponse) error
	//获得优惠劵详情
	Detail(context.Context, *Coupon, *CouponResponse) error
	//所有优惠劵查询
	Search(context.Context, *CouponRequest, *CouponResponse) error
	//优惠劵中心
	Index(context.Context, *CouponRequest, *CouponResponse) error
	//优惠劵领取
	Receive(context.Context, *CouponRequest, *CouponResponse) error
	//优惠劵发送
	Send(context.Context, *CouponSendRequest, *CouponResponse) error
}

func RegisterCouponServiceHandler(s server.Server, hdlr CouponServiceHandler, opts ...server.HandlerOption) error {
	type couponService interface {
		Create(ctx context.Context, in *Coupon, out *CouponResponse) error
		Update(ctx context.Context, in *Coupon, out *CouponResponse) error
		Delete(ctx context.Context, in *Coupon, out *CouponResponse) error
		UpdateStatus(ctx context.Context, in *Coupon, out *CouponResponse) error
		Detail(ctx context.Context, in *Coupon, out *CouponResponse) error
		Search(ctx context.Context, in *CouponRequest, out *CouponResponse) error
		Index(ctx context.Context, in *CouponRequest, out *CouponResponse) error
		Receive(ctx context.Context, in *CouponRequest, out *CouponResponse) error
		Send(ctx context.Context, in *CouponSendRequest, out *CouponResponse) error
	}
	type CouponService struct {
		couponService
	}
	h := &couponServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CouponService{h}, opts...))
}

type couponServiceHandler struct {
	CouponServiceHandler
}

func (h *couponServiceHandler) Create(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.CouponServiceHandler.Create(ctx, in, out)
}

func (h *couponServiceHandler) Update(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.CouponServiceHandler.Update(ctx, in, out)
}

func (h *couponServiceHandler) Delete(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.CouponServiceHandler.Delete(ctx, in, out)
}

func (h *couponServiceHandler) UpdateStatus(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.CouponServiceHandler.UpdateStatus(ctx, in, out)
}

func (h *couponServiceHandler) Detail(ctx context.Context, in *Coupon, out *CouponResponse) error {
	return h.CouponServiceHandler.Detail(ctx, in, out)
}

func (h *couponServiceHandler) Search(ctx context.Context, in *CouponRequest, out *CouponResponse) error {
	return h.CouponServiceHandler.Search(ctx, in, out)
}

func (h *couponServiceHandler) Index(ctx context.Context, in *CouponRequest, out *CouponResponse) error {
	return h.CouponServiceHandler.Index(ctx, in, out)
}

func (h *couponServiceHandler) Receive(ctx context.Context, in *CouponRequest, out *CouponResponse) error {
	return h.CouponServiceHandler.Receive(ctx, in, out)
}

func (h *couponServiceHandler) Send(ctx context.Context, in *CouponSendRequest, out *CouponResponse) error {
	return h.CouponServiceHandler.Send(ctx, in, out)
}
