// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: general.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GeneralService service

func NewGeneralServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GeneralService service

type GeneralService interface {
	//字典选项
	DictList(ctx context.Context, in *DictRequest, opts ...client.CallOption) (*DictResponse, error)
	//获配置信息
	GetConfig(ctx context.Context, in *CouponConfig, opts ...client.CallOption) (*ConfigResponse, error)
	//保存配置信息
	SaveConfig(ctx context.Context, in *CouponConfig, opts ...client.CallOption) (*ConfigResponse, error)
}

type generalService struct {
	c    client.Client
	name string
}

func NewGeneralService(name string, c client.Client) GeneralService {
	return &generalService{
		c:    c,
		name: name,
	}
}

func (c *generalService) DictList(ctx context.Context, in *DictRequest, opts ...client.CallOption) (*DictResponse, error) {
	req := c.c.NewRequest(c.name, "GeneralService.DictList", in)
	out := new(DictResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalService) GetConfig(ctx context.Context, in *CouponConfig, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "GeneralService.GetConfig", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *generalService) SaveConfig(ctx context.Context, in *CouponConfig, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "GeneralService.SaveConfig", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GeneralService service

type GeneralServiceHandler interface {
	//字典选项
	DictList(context.Context, *DictRequest, *DictResponse) error
	//获配置信息
	GetConfig(context.Context, *CouponConfig, *ConfigResponse) error
	//保存配置信息
	SaveConfig(context.Context, *CouponConfig, *ConfigResponse) error
}

func RegisterGeneralServiceHandler(s server.Server, hdlr GeneralServiceHandler, opts ...server.HandlerOption) error {
	type generalService interface {
		DictList(ctx context.Context, in *DictRequest, out *DictResponse) error
		GetConfig(ctx context.Context, in *CouponConfig, out *ConfigResponse) error
		SaveConfig(ctx context.Context, in *CouponConfig, out *ConfigResponse) error
	}
	type GeneralService struct {
		generalService
	}
	h := &generalServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GeneralService{h}, opts...))
}

type generalServiceHandler struct {
	GeneralServiceHandler
}

func (h *generalServiceHandler) DictList(ctx context.Context, in *DictRequest, out *DictResponse) error {
	return h.GeneralServiceHandler.DictList(ctx, in, out)
}

func (h *generalServiceHandler) GetConfig(ctx context.Context, in *CouponConfig, out *ConfigResponse) error {
	return h.GeneralServiceHandler.GetConfig(ctx, in, out)
}

func (h *generalServiceHandler) SaveConfig(ctx context.Context, in *CouponConfig, out *ConfigResponse) error {
	return h.GeneralServiceHandler.SaveConfig(ctx, in, out)
}
