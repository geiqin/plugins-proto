// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: distributorApplyService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DistributorApplyService service

func NewDistributorApplyServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DistributorApplyService service

type DistributorApplyService interface {
	// 申请首页【客户专用】
	Index(ctx context.Context, in *DistributorApply, opts ...client.CallOption) (*DistributorApplyResponse, error)
	// 发起申请【客户专用】
	Create(ctx context.Context, in *DistributorApply, opts ...client.CallOption) (*DistributorApplyResponse, error)
	//审核申请者
	Audit(ctx context.Context, in *DistributorApply, opts ...client.CallOption) (*DistributorApplyResponse, error)
	//获取申请者信息
	Detail(ctx context.Context, in *DistributorApply, opts ...client.CallOption) (*DistributorApplyResponse, error)
	//分页查询申请者
	Search(ctx context.Context, in *DistributorApplyRequest, opts ...client.CallOption) (*DistributorApplyResponse, error)
}

type distributorApplyService struct {
	c    client.Client
	name string
}

func NewDistributorApplyService(name string, c client.Client) DistributorApplyService {
	return &distributorApplyService{
		c:    c,
		name: name,
	}
}

func (c *distributorApplyService) Index(ctx context.Context, in *DistributorApply, opts ...client.CallOption) (*DistributorApplyResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorApplyService.Index", in)
	out := new(DistributorApplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorApplyService) Create(ctx context.Context, in *DistributorApply, opts ...client.CallOption) (*DistributorApplyResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorApplyService.Create", in)
	out := new(DistributorApplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorApplyService) Audit(ctx context.Context, in *DistributorApply, opts ...client.CallOption) (*DistributorApplyResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorApplyService.Audit", in)
	out := new(DistributorApplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorApplyService) Detail(ctx context.Context, in *DistributorApply, opts ...client.CallOption) (*DistributorApplyResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorApplyService.Detail", in)
	out := new(DistributorApplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorApplyService) Search(ctx context.Context, in *DistributorApplyRequest, opts ...client.CallOption) (*DistributorApplyResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorApplyService.Search", in)
	out := new(DistributorApplyResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DistributorApplyService service

type DistributorApplyServiceHandler interface {
	// 申请首页【客户专用】
	Index(context.Context, *DistributorApply, *DistributorApplyResponse) error
	// 发起申请【客户专用】
	Create(context.Context, *DistributorApply, *DistributorApplyResponse) error
	//审核申请者
	Audit(context.Context, *DistributorApply, *DistributorApplyResponse) error
	//获取申请者信息
	Detail(context.Context, *DistributorApply, *DistributorApplyResponse) error
	//分页查询申请者
	Search(context.Context, *DistributorApplyRequest, *DistributorApplyResponse) error
}

func RegisterDistributorApplyServiceHandler(s server.Server, hdlr DistributorApplyServiceHandler, opts ...server.HandlerOption) error {
	type distributorApplyService interface {
		Index(ctx context.Context, in *DistributorApply, out *DistributorApplyResponse) error
		Create(ctx context.Context, in *DistributorApply, out *DistributorApplyResponse) error
		Audit(ctx context.Context, in *DistributorApply, out *DistributorApplyResponse) error
		Detail(ctx context.Context, in *DistributorApply, out *DistributorApplyResponse) error
		Search(ctx context.Context, in *DistributorApplyRequest, out *DistributorApplyResponse) error
	}
	type DistributorApplyService struct {
		distributorApplyService
	}
	h := &distributorApplyServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DistributorApplyService{h}, opts...))
}

type distributorApplyServiceHandler struct {
	DistributorApplyServiceHandler
}

func (h *distributorApplyServiceHandler) Index(ctx context.Context, in *DistributorApply, out *DistributorApplyResponse) error {
	return h.DistributorApplyServiceHandler.Index(ctx, in, out)
}

func (h *distributorApplyServiceHandler) Create(ctx context.Context, in *DistributorApply, out *DistributorApplyResponse) error {
	return h.DistributorApplyServiceHandler.Create(ctx, in, out)
}

func (h *distributorApplyServiceHandler) Audit(ctx context.Context, in *DistributorApply, out *DistributorApplyResponse) error {
	return h.DistributorApplyServiceHandler.Audit(ctx, in, out)
}

func (h *distributorApplyServiceHandler) Detail(ctx context.Context, in *DistributorApply, out *DistributorApplyResponse) error {
	return h.DistributorApplyServiceHandler.Detail(ctx, in, out)
}

func (h *distributorApplyServiceHandler) Search(ctx context.Context, in *DistributorApplyRequest, out *DistributorApplyResponse) error {
	return h.DistributorApplyServiceHandler.Search(ctx, in, out)
}
