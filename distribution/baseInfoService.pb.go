// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: baseInfoService.proto

package services

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MemberInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                     //ID
	Type            string      `protobuf:"bytes,2,opt,name=type,proto3" json:"type"`                                                  //类型：0个人,1企业
	NumberCode      string      `protobuf:"bytes,3,opt,name=number_code,json=numberCode,proto3" json:"number_code"`                    //会员编号
	Username        string      `protobuf:"bytes,4,opt,name=username,proto3" json:"username"`                                          //用户名称
	Nickname        string      `protobuf:"bytes,5,opt,name=nickname,proto3" json:"nickname"`                                          //用户昵称
	Gender          string      `protobuf:"bytes,6,opt,name=gender,proto3" json:"gender"`                                              //性别:0=未知,1=男,2=女
	Birthday        string      `protobuf:"bytes,7,opt,name=birthday,proto3" json:"birthday"`                                          //会员生日
	ProvinceId      int64       `protobuf:"varint,8,opt,name=province_id,json=provinceId,proto3" json:"province_id"`                   //区域ID
	CityId          int64       `protobuf:"varint,9,opt,name=city_id,json=cityId,proto3" json:"city_id"`                               //区域ID
	CountyId        int64       `protobuf:"varint,10,opt,name=county_id,json=countyId,proto3" json:"county_id"`                        //区域ID
	ProvinceName    string      `protobuf:"bytes,11,opt,name=province_name,json=provinceName,proto3" json:"province_name"`             //所在省
	CityName        string      `protobuf:"bytes,12,opt,name=city_name,json=cityName,proto3" json:"city_name"`                         //所在市
	CountyName      string      `protobuf:"bytes,13,opt,name=county_name,json=countyName,proto3" json:"county_name"`                   //所在区/县
	Address         string      `protobuf:"bytes,14,opt,name=address,proto3" json:"address"`                                           //详细地址
	Email           string      `protobuf:"bytes,15,opt,name=email,proto3" json:"email"`                                               //绑定邮箱
	Mobile          string      `protobuf:"bytes,16,opt,name=mobile,proto3" json:"mobile"`                                             //绑定手机
	AvatarUrl       string      `protobuf:"bytes,17,opt,name=avatar_url,json=avatarUrl,proto3" json:"avatar_url"`                      //会员头像url地址
	FreeLevelId     int32       `protobuf:"varint,18,opt,name=free_level_id,json=freeLevelId,proto3" json:"free_level_id"`             //会员等级ID
	Integral        int64       `protobuf:"varint,19,opt,name=integral,proto3" json:"integral"`                                        //有效积分
	LockingIntegral int64       `protobuf:"varint,20,opt,name=locking_integral,json=lockingIntegral,proto3" json:"locking_integral"`   //锁定积分
	Points          int64       `protobuf:"varint,21,opt,name=points,proto3" json:"points"`                                            //累计积分(升级专用)
	OrderTotalCount int64       `protobuf:"varint,22,opt,name=order_total_count,json=orderTotalCount,proto3" json:"order_total_count"` //订单成交笔数
	OrderTotalPrice int64       `protobuf:"varint,23,opt,name=order_total_price,json=orderTotalPrice,proto3" json:"order_total_price"` //订单成交总额
	CommentCount    int32       `protobuf:"varint,24,opt,name=comment_count,json=commentCount,proto3" json:"comment_count"`            //评价总数
	CollectCount    int32       `protobuf:"varint,25,opt,name=collect_count,json=collectCount,proto3" json:"collect_count"`            //商品收藏总数
	ReferrerId      int64       `protobuf:"varint,26,opt,name=referrer_id,json=referrerId,proto3" json:"referrer_id"`                  //推荐人ID
	ClientType      string      `protobuf:"bytes,27,opt,name=client_type,json=clientType,proto3" json:"client_type"`                   //来源终端
	ContactTel      string      `protobuf:"bytes,28,opt,name=contact_tel,json=contactTel,proto3" json:"contact_tel"`                   //联系电话
	IsScatter       string      `protobuf:"bytes,29,opt,name=is_scatter,json=isScatter,proto3" json:"is_scatter"`                      //是否为散客（0否，1是）
	IsTrusted       string      `protobuf:"bytes,30,opt,name=is_trusted,json=isTrusted,proto3" json:"is_trusted"`                      //是否已实名认证（0否，1是）
	Memo            string      `protobuf:"bytes,31,opt,name=memo,proto3" json:"memo"`                                                 //备注
	Surplus         int64       `protobuf:"varint,32,opt,name=surplus,proto3" json:"surplus"`                                          //可用余额（依赖钱包更新）
	Status          string      `protobuf:"bytes,33,opt,name=status,proto3" json:"status"`                                             //状态：1正常，2锁定，3禁用，9注销
	CreatedAt       string      `protobuf:"bytes,34,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt       string      `protobuf:"bytes,35,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	IsDistributor   string      `protobuf:"bytes,36,opt,name=is_distributor,json=isDistributor,proto3" json:"is_distributor"` //是否分销员（0否，1是）
	Referrer        *MemberInfo `protobuf:"bytes,37,opt,name=referrer,proto3" json:"referrer"`
}

func (x *MemberInfo) Reset() {
	*x = MemberInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseInfoService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MemberInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MemberInfo) ProtoMessage() {}

func (x *MemberInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseInfoService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MemberInfo.ProtoReflect.Descriptor instead.
func (*MemberInfo) Descriptor() ([]byte, []int) {
	return file_baseInfoService_proto_rawDescGZIP(), []int{0}
}

func (x *MemberInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *MemberInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *MemberInfo) GetNumberCode() string {
	if x != nil {
		return x.NumberCode
	}
	return ""
}

func (x *MemberInfo) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *MemberInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *MemberInfo) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *MemberInfo) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *MemberInfo) GetProvinceId() int64 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *MemberInfo) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *MemberInfo) GetCountyId() int64 {
	if x != nil {
		return x.CountyId
	}
	return 0
}

func (x *MemberInfo) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *MemberInfo) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *MemberInfo) GetCountyName() string {
	if x != nil {
		return x.CountyName
	}
	return ""
}

func (x *MemberInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *MemberInfo) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *MemberInfo) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *MemberInfo) GetAvatarUrl() string {
	if x != nil {
		return x.AvatarUrl
	}
	return ""
}

func (x *MemberInfo) GetFreeLevelId() int32 {
	if x != nil {
		return x.FreeLevelId
	}
	return 0
}

func (x *MemberInfo) GetIntegral() int64 {
	if x != nil {
		return x.Integral
	}
	return 0
}

func (x *MemberInfo) GetLockingIntegral() int64 {
	if x != nil {
		return x.LockingIntegral
	}
	return 0
}

func (x *MemberInfo) GetPoints() int64 {
	if x != nil {
		return x.Points
	}
	return 0
}

func (x *MemberInfo) GetOrderTotalCount() int64 {
	if x != nil {
		return x.OrderTotalCount
	}
	return 0
}

func (x *MemberInfo) GetOrderTotalPrice() int64 {
	if x != nil {
		return x.OrderTotalPrice
	}
	return 0
}

func (x *MemberInfo) GetCommentCount() int32 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *MemberInfo) GetCollectCount() int32 {
	if x != nil {
		return x.CollectCount
	}
	return 0
}

func (x *MemberInfo) GetReferrerId() int64 {
	if x != nil {
		return x.ReferrerId
	}
	return 0
}

func (x *MemberInfo) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *MemberInfo) GetContactTel() string {
	if x != nil {
		return x.ContactTel
	}
	return ""
}

func (x *MemberInfo) GetIsScatter() string {
	if x != nil {
		return x.IsScatter
	}
	return ""
}

func (x *MemberInfo) GetIsTrusted() string {
	if x != nil {
		return x.IsTrusted
	}
	return ""
}

func (x *MemberInfo) GetMemo() string {
	if x != nil {
		return x.Memo
	}
	return ""
}

func (x *MemberInfo) GetSurplus() int64 {
	if x != nil {
		return x.Surplus
	}
	return 0
}

func (x *MemberInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *MemberInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *MemberInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *MemberInfo) GetIsDistributor() string {
	if x != nil {
		return x.IsDistributor
	}
	return ""
}

func (x *MemberInfo) GetReferrer() *MemberInfo {
	if x != nil {
		return x.Referrer
	}
	return nil
}

//产品信息
type ProductInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SpuId                int64             `protobuf:"varint,1,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`                                                                                                                       //SpuID
	ShopId               int64             `protobuf:"varint,2,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                                                                                                    //多店铺ID
	TaxonomyId           int64             `protobuf:"varint,3,opt,name=taxonomy_id,json=taxonomyId,proto3" json:"taxonomy_id"`                                                                                                        //标准类目ID
	CategoryId           int64             `protobuf:"varint,4,opt,name=category_id,json=categoryId,proto3" json:"category_id"`                                                                                                        //商品分类ID
	BrandId              int32             `protobuf:"varint,5,opt,name=brand_id,json=brandId,proto3" json:"brand_id"`                                                                                                                 //品牌ID
	Title                string            `protobuf:"bytes,6,opt,name=title,proto3" json:"title"`                                                                                                                                     //商品标题
	TitleColor           string            `protobuf:"bytes,7,opt,name=title_color,json=titleColor,proto3" json:"title_color"`                                                                                                         //标题颜色
	SimpleDesc           string            `protobuf:"bytes,8,opt,name=simple_desc,json=simpleDesc,proto3" json:"simple_desc"`                                                                                                         //简述
	Type                 string            `protobuf:"bytes,9,opt,name=type,proto3" json:"type"`                                                                                                                                       //商品类型：goods实物商品,fictitious虚拟商品,combine组合商品
	IsVirtual            string            `protobuf:"bytes,10,opt,name=is_virtual,json=isVirtual,proto3" json:"is_virtual"`                                                                                                           //是否为虚拟商品（0否, 1是）
	IsManySpec           string            `protobuf:"bytes,11,opt,name=is_many_spec,json=isManySpec,proto3" json:"is_many_spec"`                                                                                                      //是否多规格商品（0否, 1是）
	IsOpenWeight         string            `protobuf:"bytes,12,opt,name=is_open_weight,json=isOpenWeight,proto3" json:"is_open_weight"`                                                                                                //是否开启称重（0否, 1是）
	IsOpenPresale        string            `protobuf:"bytes,13,opt,name=is_open_presale,json=isOpenPresale,proto3" json:"is_open_presale"`                                                                                             //是否开启预售（0否, 1是）
	Model                string            `protobuf:"bytes,14,opt,name=model,proto3" json:"model"`                                                                                                                                    //型号
	PlaceOriginId        int64             `protobuf:"varint,15,opt,name=place_origin_id,json=placeOriginId,proto3" json:"place_origin_id"`                                                                                            //产地ID（地区省id）
	Unit                 string            `protobuf:"bytes,16,opt,name=unit,proto3" json:"unit"`                                                                                                                                      //计量单位
	UnitRate             float32           `protobuf:"fixed32,17,opt,name=unit_rate,json=unitRate,proto3" json:"unit_rate"`                                                                                                            //计量单位换算率(称重商品需要)
	WeightPluCode        string            `protobuf:"bytes,18,opt,name=weight_plu_code,json=weightPluCode,proto3" json:"weight_plu_code"`                                                                                             //称重PLU码
	ImageUrl             string            `protobuf:"bytes,20,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`                                                                                                              //商品主图url
	VideoUrl             string            `protobuf:"bytes,21,opt,name=video_url,json=videoUrl,proto3" json:"video_url"`                                                                                                              //短视频url
	Content              string            `protobuf:"bytes,22,opt,name=content,proto3" json:"content"`                                                                                                                                //商品内容
	IsShelve             string            `protobuf:"bytes,24,opt,name=is_shelve,json=isShelve,proto3" json:"is_shelve"`                                                                                                              //是否上架（ 0否, 1是）
	IsDisableBuy         string            `protobuf:"bytes,25,opt,name=is_disable_buy,json=isDisableBuy,proto3" json:"is_disable_buy"`                                                                                                //是否不允许直接购买
	IsDeductionInventory string            `protobuf:"bytes,26,opt,name=is_deduction_inventory,json=isDeductionInventory,proto3" json:"is_deduction_inventory"`                                                                        //是否扣减库存（0否, 1是）
	IsMemberRight        string            `protobuf:"bytes,27,opt,name=is_member_right,json=isMemberRight,proto3" json:"is_member_right"`                                                                                             //是否设置商品购买权限（0否, 1是）
	IsMemberPrice        string            `protobuf:"bytes,28,opt,name=is_member_price,json=isMemberPrice,proto3" json:"is_member_price"`                                                                                             //是否参与会员折扣价（0否, 1是）
	MinOriginalPrice     int64             `protobuf:"varint,29,opt,name=min_original_price,json=minOriginalPrice,proto3" json:"min_original_price"`                                                                                   //最低原价
	MaxOriginalPrice     int64             `protobuf:"varint,30,opt,name=max_original_price,json=maxOriginalPrice,proto3" json:"max_original_price"`                                                                                   //最大原价
	MinPrice             int64             `protobuf:"varint,31,opt,name=min_price,json=minPrice,proto3" json:"min_price"`                                                                                                             //最低价格
	MaxPrice             int64             `protobuf:"varint,32,opt,name=max_price,json=maxPrice,proto3" json:"max_price"`                                                                                                             //最高价格
	BuyMinNumber         int64             `protobuf:"varint,33,opt,name=buy_min_number,json=buyMinNumber,proto3" json:"buy_min_number"`                                                                                               //最低起购数量（默认1）
	BuyMaxNumber         int64             `protobuf:"varint,34,opt,name=buy_max_number,json=buyMaxNumber,proto3" json:"buy_max_number"`                                                                                               //最大购买数量（最大数值 100000000, 小于等于0或空则不限）
	PhotoCount           int32             `protobuf:"varint,35,opt,name=photo_count,json=photoCount,proto3" json:"photo_count"`                                                                                                       //相册图片数量
	AccessCount          int32             `protobuf:"varint,36,opt,name=access_count,json=accessCount,proto3" json:"access_count"`                                                                                                    //访问次数
	SaleCount            int32             `protobuf:"varint,37,opt,name=sale_count,json=saleCount,proto3" json:"sale_count"`                                                                                                          //实际销量
	InitialSaleCount     int32             `protobuf:"varint,38,opt,name=initial_sale_count,json=initialSaleCount,proto3" json:"initial_sale_count"`                                                                                   //初始销售数量（前端展示销量=实际销量+初始销售数量）
	ButtonMode           string            `protobuf:"bytes,41,opt,name=button_mode,json=buttonMode,proto3" json:"button_mode"`                                                                                                        //立即购买按钮：1默认名称，2自定义名称
	ButtonCustom         string            `protobuf:"bytes,42,opt,name=button_custom,json=buttonCustom,proto3" json:"button_custom"`                                                                                                  //按钮自定义名称,英文最多15个字符
	FreightType          string            `protobuf:"bytes,43,opt,name=freight_type,json=freightType,proto3" json:"freight_type"`                                                                                                     //运费模式：0统一邮费，1运费模板
	FreightUniformFee    int64             `protobuf:"varint,44,opt,name=freight_uniform_fee,json=freightUniformFee,proto3" json:"freight_uniform_fee"`                                                                                //统一运费
	FreightTemplateId    int64             `protobuf:"varint,45,opt,name=freight_template_id,json=freightTemplateId,proto3" json:"freight_template_id"`                                                                                //运费模板ID
	SupportLogistics     []string          `protobuf:"bytes,46,rep,name=support_logistics,json=supportLogistics,proto3" json:"support_logistics"`                                                                                      //支持的物流类型（1快递发货, 2同城配送, 3虚拟发货,4上门自提）
	SupportClientType    []string          `protobuf:"bytes,47,rep,name=support_client_type,json=supportClientType,proto3" json:"support_client_type"`                                                                                 //支持的客户终端
	FictitiousValue      map[string]string `protobuf:"bytes,48,rep,name=fictitious_value,json=fictitiousValue,proto3" json:"fictitious_value" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` //虚拟商品展示数据
	DetailTemplateId     int64             `protobuf:"varint,49,opt,name=detail_template_id,json=detailTemplateId,proto3" json:"detail_template_id"`                                                                                   //展示详情模板ID
	SeoTitle             string            `protobuf:"bytes,50,opt,name=seo_title,json=seoTitle,proto3" json:"seo_title"`                                                                                                              //SEO标题
	SeoKeywords          string            `protobuf:"bytes,51,opt,name=seo_keywords,json=seoKeywords,proto3" json:"seo_keywords"`                                                                                                     //SEO关键字
	SeoDesc              string            `protobuf:"bytes,52,opt,name=seo_desc,json=seoDesc,proto3" json:"seo_desc"`                                                                                                                 //SEO描述
	Sort                 int32             `protobuf:"varint,53,opt,name=sort,proto3" json:"sort"`                                                                                                                                     //排序(数字越大显示越靠前)
	Status               string            `protobuf:"bytes,54,opt,name=status,proto3" json:"status"`                                                                                                                                  //商品状态。0创建 1新品 2正常 3清仓 4停售 5淘汰
	CreatedAt            string            `protobuf:"bytes,55,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            string            `protobuf:"bytes,56,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	BrandName            string            `protobuf:"bytes,75,opt,name=brand_name,json=brandName,proto3" json:"brand_name"`
	IsDelete             string            `protobuf:"bytes,76,opt,name=is_delete,json=isDelete,proto3" json:"is_delete"`                   //是否删除（0否，1是）
	IsError              string            `protobuf:"bytes,77,opt,name=is_error,json=isError,proto3" json:"is_error"`                      //是否错误（0否，1是）
	ErrorMsg             string            `protobuf:"bytes,78,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg"`                   //错误信息
	OriginalPrice        int64             `protobuf:"varint,80,opt,name=original_price,json=originalPrice,proto3" json:"original_price"`   //划线价
	CostPrice            int64             `protobuf:"varint,81,opt,name=cost_price,json=costPrice,proto3" json:"cost_price"`               //成本价
	Price                int64             `protobuf:"varint,82,opt,name=price,proto3" json:"price"`                                        //销售价
	Inventory            int64             `protobuf:"varint,83,opt,name=inventory,proto3" json:"inventory"`                                //库存
	Md5Key               string            `protobuf:"bytes,84,opt,name=md5_key,json=md5Key,proto3" json:"md5_key"`                         //唯一标识
	Coding               string            `protobuf:"bytes,85,opt,name=coding,proto3" json:"coding"`                                       //编号
	Barcode              string            `protobuf:"bytes,86,opt,name=barcode,proto3" json:"barcode"`                                     //条码
	Weight               int64             `protobuf:"varint,87,opt,name=weight,proto3" json:"weight"`                                      //重量：克
	Volume               int64             `protobuf:"varint,88,opt,name=volume,proto3" json:"volume"`                                      //体积
	SpecDesc             string            `protobuf:"bytes,89,opt,name=spec_desc,json=specDesc,proto3" json:"spec_desc"`                   //规格描述
	GoodsUrl             string            `protobuf:"bytes,92,opt,name=goods_url,json=goodsUrl,proto3" json:"goods_url"`                   //商品URL
	Spec                 []*SkuSpecInfo    `protobuf:"bytes,93,rep,name=spec,proto3" json:"spec"`                                           //规格
	IsDistribution       string            `protobuf:"bytes,94,opt,name=is_distribution,json=isDistribution,proto3" json:"is_distribution"` //是否分销（0否，1是）
	Checked              bool              `protobuf:"varint,95,opt,name=checked,proto3" json:"checked"`
}

func (x *ProductInfo) Reset() {
	*x = ProductInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseInfoService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProductInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProductInfo) ProtoMessage() {}

func (x *ProductInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseInfoService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProductInfo.ProtoReflect.Descriptor instead.
func (*ProductInfo) Descriptor() ([]byte, []int) {
	return file_baseInfoService_proto_rawDescGZIP(), []int{1}
}

func (x *ProductInfo) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *ProductInfo) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *ProductInfo) GetTaxonomyId() int64 {
	if x != nil {
		return x.TaxonomyId
	}
	return 0
}

func (x *ProductInfo) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *ProductInfo) GetBrandId() int32 {
	if x != nil {
		return x.BrandId
	}
	return 0
}

func (x *ProductInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProductInfo) GetTitleColor() string {
	if x != nil {
		return x.TitleColor
	}
	return ""
}

func (x *ProductInfo) GetSimpleDesc() string {
	if x != nil {
		return x.SimpleDesc
	}
	return ""
}

func (x *ProductInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ProductInfo) GetIsVirtual() string {
	if x != nil {
		return x.IsVirtual
	}
	return ""
}

func (x *ProductInfo) GetIsManySpec() string {
	if x != nil {
		return x.IsManySpec
	}
	return ""
}

func (x *ProductInfo) GetIsOpenWeight() string {
	if x != nil {
		return x.IsOpenWeight
	}
	return ""
}

func (x *ProductInfo) GetIsOpenPresale() string {
	if x != nil {
		return x.IsOpenPresale
	}
	return ""
}

func (x *ProductInfo) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *ProductInfo) GetPlaceOriginId() int64 {
	if x != nil {
		return x.PlaceOriginId
	}
	return 0
}

func (x *ProductInfo) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *ProductInfo) GetUnitRate() float32 {
	if x != nil {
		return x.UnitRate
	}
	return 0
}

func (x *ProductInfo) GetWeightPluCode() string {
	if x != nil {
		return x.WeightPluCode
	}
	return ""
}

func (x *ProductInfo) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *ProductInfo) GetVideoUrl() string {
	if x != nil {
		return x.VideoUrl
	}
	return ""
}

func (x *ProductInfo) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *ProductInfo) GetIsShelve() string {
	if x != nil {
		return x.IsShelve
	}
	return ""
}

func (x *ProductInfo) GetIsDisableBuy() string {
	if x != nil {
		return x.IsDisableBuy
	}
	return ""
}

func (x *ProductInfo) GetIsDeductionInventory() string {
	if x != nil {
		return x.IsDeductionInventory
	}
	return ""
}

func (x *ProductInfo) GetIsMemberRight() string {
	if x != nil {
		return x.IsMemberRight
	}
	return ""
}

func (x *ProductInfo) GetIsMemberPrice() string {
	if x != nil {
		return x.IsMemberPrice
	}
	return ""
}

func (x *ProductInfo) GetMinOriginalPrice() int64 {
	if x != nil {
		return x.MinOriginalPrice
	}
	return 0
}

func (x *ProductInfo) GetMaxOriginalPrice() int64 {
	if x != nil {
		return x.MaxOriginalPrice
	}
	return 0
}

func (x *ProductInfo) GetMinPrice() int64 {
	if x != nil {
		return x.MinPrice
	}
	return 0
}

func (x *ProductInfo) GetMaxPrice() int64 {
	if x != nil {
		return x.MaxPrice
	}
	return 0
}

func (x *ProductInfo) GetBuyMinNumber() int64 {
	if x != nil {
		return x.BuyMinNumber
	}
	return 0
}

func (x *ProductInfo) GetBuyMaxNumber() int64 {
	if x != nil {
		return x.BuyMaxNumber
	}
	return 0
}

func (x *ProductInfo) GetPhotoCount() int32 {
	if x != nil {
		return x.PhotoCount
	}
	return 0
}

func (x *ProductInfo) GetAccessCount() int32 {
	if x != nil {
		return x.AccessCount
	}
	return 0
}

func (x *ProductInfo) GetSaleCount() int32 {
	if x != nil {
		return x.SaleCount
	}
	return 0
}

func (x *ProductInfo) GetInitialSaleCount() int32 {
	if x != nil {
		return x.InitialSaleCount
	}
	return 0
}

func (x *ProductInfo) GetButtonMode() string {
	if x != nil {
		return x.ButtonMode
	}
	return ""
}

func (x *ProductInfo) GetButtonCustom() string {
	if x != nil {
		return x.ButtonCustom
	}
	return ""
}

func (x *ProductInfo) GetFreightType() string {
	if x != nil {
		return x.FreightType
	}
	return ""
}

func (x *ProductInfo) GetFreightUniformFee() int64 {
	if x != nil {
		return x.FreightUniformFee
	}
	return 0
}

func (x *ProductInfo) GetFreightTemplateId() int64 {
	if x != nil {
		return x.FreightTemplateId
	}
	return 0
}

func (x *ProductInfo) GetSupportLogistics() []string {
	if x != nil {
		return x.SupportLogistics
	}
	return nil
}

func (x *ProductInfo) GetSupportClientType() []string {
	if x != nil {
		return x.SupportClientType
	}
	return nil
}

func (x *ProductInfo) GetFictitiousValue() map[string]string {
	if x != nil {
		return x.FictitiousValue
	}
	return nil
}

func (x *ProductInfo) GetDetailTemplateId() int64 {
	if x != nil {
		return x.DetailTemplateId
	}
	return 0
}

func (x *ProductInfo) GetSeoTitle() string {
	if x != nil {
		return x.SeoTitle
	}
	return ""
}

func (x *ProductInfo) GetSeoKeywords() string {
	if x != nil {
		return x.SeoKeywords
	}
	return ""
}

func (x *ProductInfo) GetSeoDesc() string {
	if x != nil {
		return x.SeoDesc
	}
	return ""
}

func (x *ProductInfo) GetSort() int32 {
	if x != nil {
		return x.Sort
	}
	return 0
}

func (x *ProductInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ProductInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ProductInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ProductInfo) GetBrandName() string {
	if x != nil {
		return x.BrandName
	}
	return ""
}

func (x *ProductInfo) GetIsDelete() string {
	if x != nil {
		return x.IsDelete
	}
	return ""
}

func (x *ProductInfo) GetIsError() string {
	if x != nil {
		return x.IsError
	}
	return ""
}

func (x *ProductInfo) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

func (x *ProductInfo) GetOriginalPrice() int64 {
	if x != nil {
		return x.OriginalPrice
	}
	return 0
}

func (x *ProductInfo) GetCostPrice() int64 {
	if x != nil {
		return x.CostPrice
	}
	return 0
}

func (x *ProductInfo) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ProductInfo) GetInventory() int64 {
	if x != nil {
		return x.Inventory
	}
	return 0
}

func (x *ProductInfo) GetMd5Key() string {
	if x != nil {
		return x.Md5Key
	}
	return ""
}

func (x *ProductInfo) GetCoding() string {
	if x != nil {
		return x.Coding
	}
	return ""
}

func (x *ProductInfo) GetBarcode() string {
	if x != nil {
		return x.Barcode
	}
	return ""
}

func (x *ProductInfo) GetWeight() int64 {
	if x != nil {
		return x.Weight
	}
	return 0
}

func (x *ProductInfo) GetVolume() int64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *ProductInfo) GetSpecDesc() string {
	if x != nil {
		return x.SpecDesc
	}
	return ""
}

func (x *ProductInfo) GetGoodsUrl() string {
	if x != nil {
		return x.GoodsUrl
	}
	return ""
}

func (x *ProductInfo) GetSpec() []*SkuSpecInfo {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *ProductInfo) GetIsDistribution() string {
	if x != nil {
		return x.IsDistribution
	}
	return ""
}

func (x *ProductInfo) GetChecked() bool {
	if x != nil {
		return x.Checked
	}
	return false
}

//货品规格信息
type SkuSpecInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
}

func (x *SkuSpecInfo) Reset() {
	*x = SkuSpecInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseInfoService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuSpecInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuSpecInfo) ProtoMessage() {}

func (x *SkuSpecInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseInfoService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuSpecInfo.ProtoReflect.Descriptor instead.
func (*SkuSpecInfo) Descriptor() ([]byte, []int) {
	return file_baseInfoService_proto_rawDescGZIP(), []int{2}
}

func (x *SkuSpecInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *SkuSpecInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

//订单信息
type OrderInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                                       //ID
	OrderNo               string  `protobuf:"bytes,2,opt,name=order_no,json=orderNo,proto3" json:"order_no"`                                               //单号
	MemberId              int64   `protobuf:"varint,3,opt,name=member_id,json=memberId,proto3" json:"member_id"`                                           //客户ID
	ShopId                int64   `protobuf:"varint,4,opt,name=shop_id,json=shopId,proto3" json:"shop_id"`                                                 //多商户ID(依赖多商户插件)
	RealstoreId           int64   `protobuf:"varint,5,opt,name=realstore_id,json=realstoreId,proto3" json:"realstore_id"`                                  //多门店ID(依赖多商户插件)
	WarehouseId           int64   `protobuf:"varint,6,opt,name=warehouse_id,json=warehouseId,proto3" json:"warehouse_id"`                                  //仓库ID
	BuyCount              float32 `protobuf:"fixed32,7,opt,name=buy_count,json=buyCount,proto3" json:"buy_count"`                                          //购买商品总数量(总件数+总称重（千克）)
	BuyNumberCount        int64   `protobuf:"varint,8,opt,name=buy_number_count,json=buyNumberCount,proto3" json:"buy_number_count"`                       //购买商品总件数（非称重商品）
	BuyWeightCount        int64   `protobuf:"varint,9,opt,name=buy_weight_count,json=buyWeightCount,proto3" json:"buy_weight_count"`                       //购买商品总秤重（称重商品.克）
	TotalPrice            int64   `protobuf:"varint,10,opt,name=total_price,json=totalPrice,proto3" json:"total_price"`                                    //订单单价
	ActualPrice           int64   `protobuf:"varint,11,opt,name=actual_price,json=actualPrice,proto3" json:"actual_price"`                                 //订单总价(订单最终价格)
	IncreasePrice         int64   `protobuf:"varint,12,opt,name=increase_price,json=increasePrice,proto3" json:"increase_price"`                           //增加的金额
	PreferentialPrice     int64   `protobuf:"varint,13,opt,name=preferential_price,json=preferentialPrice,proto3" json:"preferential_price"`               //优惠金额
	UseIntegral           int64   `protobuf:"varint,14,opt,name=use_integral,json=useIntegral,proto3" json:"use_integral"`                                 //使用积分
	UseSurplus            int64   `protobuf:"varint,15,opt,name=use_surplus,json=useSurplus,proto3" json:"use_surplus"`                                    //使用余额
	PaidMoney             int64   `protobuf:"varint,16,opt,name=paid_money,json=paidMoney,proto3" json:"paid_money"`                                       //已支付金额
	RefundedMoney         int64   `protobuf:"varint,17,opt,name=refunded_money,json=refundedMoney,proto3" json:"refunded_money"`                           //已退款金额
	ReturnedNumber        int64   `protobuf:"varint,18,opt,name=returned_number,json=returnedNumber,proto3" json:"returned_number"`                        //已退货数量
	DeliveredNumber       int64   `protobuf:"varint,19,opt,name=delivered_number,json=deliveredNumber,proto3" json:"delivered_number"`                     //已发货数量
	IntegralDiscountType  string  `protobuf:"bytes,20,opt,name=integral_discount_type,json=integralDiscountType,proto3" json:"integral_discount_type"`     //积分优惠类型：0-无积分优惠,1-积分抵现，2积分兑换
	IntegralDeductionRate int64   `protobuf:"varint,21,opt,name=integral_deduction_rate,json=integralDeductionRate,proto3" json:"integral_deduction_rate"` //积分抵现率
	ClientType            string  `protobuf:"bytes,22,opt,name=client_type,json=clientType,proto3" json:"client_type"`                                     //客户端类型（pc, h5, ios, android, alipay, weixin, baidu）取APPLICATION_CLIENT_TYPE常量值
	OrderModel            string  `protobuf:"bytes,23,opt,name=order_model,json=orderModel,proto3" json:"order_model"`                                     //订单模式（0销售型, 1展示型, 2自提点, 3虚拟销售）
	Subject               string  `protobuf:"bytes,24,opt,name=subject,proto3" json:"subject"`                                                             //订单标题(为支付提供标题)。
	CoverUrl              string  `protobuf:"bytes,25,opt,name=cover_url,json=coverUrl,proto3" json:"cover_url"`                                           //订单商品封面URL（默认取商品明细里数量最多的商品主图）
	UserNote              string  `protobuf:"bytes,26,opt,name=user_note,json=userNote,proto3" json:"user_note"`                                           //订单附言,由用户提交订单前填写
	SellerNote            string  `protobuf:"bytes,27,opt,name=seller_note,json=sellerNote,proto3" json:"seller_note"`                                     //商家留言,当该字段值时可以在订单查询看到
	LogisticsType         string  `protobuf:"bytes,28,opt,name=logistics_type,json=logisticsType,proto3" json:"logistics_type"`                            //物流模式：1-物流快递，2-同城配送，3-虚拟发货，4-用户自提
	DeliveryMode          string  `protobuf:"bytes,29,opt,name=delivery_mode,json=deliveryMode,proto3" json:"delivery_mode"`                               //发货模式：1-统一发货，2-分拆发货
	IsAllDelivered        string  `protobuf:"bytes,30,opt,name=is_all_delivered,json=isAllDelivered,proto3" json:"is_all_delivered"`                       //是否已全部发货(发货模式为2时有效)（0否，1是）
	IsUnderlinePay        string  `protobuf:"bytes,31,opt,name=is_underline_pay,json=isUnderlinePay,proto3" json:"is_underline_pay"`                       //是否线下支付（0否，1是）(如果多次支付以第一次为准)
	IsCod                 string  `protobuf:"bytes,32,opt,name=is_cod,json=isCod,proto3" json:"is_cod"`                                                    //是否货到付款
	IsInvoiced            string  `protobuf:"bytes,33,opt,name=is_invoiced,json=isInvoiced,proto3" json:"is_invoiced"`                                     //是否已过开票（0否，1是）
	IsRefunded            string  `protobuf:"bytes,34,opt,name=is_refunded,json=isRefunded,proto3" json:"is_refunded"`                                     //是否已产生退款（0否，1是）
	IsModifyAddress       string  `protobuf:"bytes,35,opt,name=is_modify_address,json=isModifyAddress,proto3" json:"is_modify_address"`                    //是否手动修改过订单地址（0否，1是）
	IsModifyPrice         string  `protobuf:"bytes,36,opt,name=is_modify_price,json=isModifyPrice,proto3" json:"is_modify_price"`                          //是否手动修改过订单价（0否，1是）
	PaymentId             int32   `protobuf:"varint,37,opt,name=payment_id,json=paymentId,proto3" json:"payment_id"`                                       //用户选择的支付方式的id,取值表payment
	PaymentType           string  `protobuf:"bytes,38,opt,name=payment_type,json=paymentType,proto3" json:"payment_type"`                                  //支付类型
	PaymentWayCode        string  `protobuf:"bytes,39,opt,name=payment_way_code,json=paymentWayCode,proto3" json:"payment_way_code"`                       //支付通道Code
	PayStatus             string  `protobuf:"bytes,40,opt,name=pay_status,json=payStatus,proto3" json:"pay_status"`                                        //支付状态（0未支付, 1已支付, 2已退款, 3部分退款）
	Status                string  `protobuf:"bytes,41,opt,name=status,proto3" json:"status"`                                                               //订单状态（0待确认, 1已确认/待支付, 2已支付/待发货, 3已发货/待收货, 4已完成, 5已取消, 6已关闭）
	PayTime               string  `protobuf:"bytes,42,opt,name=pay_time,json=payTime,proto3" json:"pay_time"`                                              //支付时间
	ConfirmTime           string  `protobuf:"bytes,43,opt,name=confirm_time,json=confirmTime,proto3" json:"confirm_time"`                                  //订单确认时间
	DeliveryTime          string  `protobuf:"bytes,44,opt,name=delivery_time,json=deliveryTime,proto3" json:"delivery_time"`                               //发货时间
	CancelTime            string  `protobuf:"bytes,45,opt,name=cancel_time,json=cancelTime,proto3" json:"cancel_time"`                                     //取消时间
	CollectTime           string  `protobuf:"bytes,46,opt,name=collect_time,json=collectTime,proto3" json:"collect_time"`                                  //收货时间
	CloseTime             string  `protobuf:"bytes,47,opt,name=close_time,json=closeTime,proto3" json:"close_time"`                                        //退款完成时间
	FinishedTime          string  `protobuf:"bytes,48,opt,name=finished_time,json=finishedTime,proto3" json:"finished_time"`                               //订单完成时间
	CreatedAt             string  `protobuf:"bytes,49,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt             string  `protobuf:"bytes,50,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	//--ext---
	IsCanLaunchAftersale bool   `protobuf:"varint,55,opt,name=is_can_launch_aftersale,json=isCanLaunchAftersale,proto3" json:"is_can_launch_aftersale"` //是否启动售后服务
	ClientTypeName       string `protobuf:"bytes,56,opt,name=client_type_name,json=clientTypeName,proto3" json:"client_type_name"`                      //终端类型名称
	PaymentTypeName      string `protobuf:"bytes,57,opt,name=payment_type_name,json=paymentTypeName,proto3" json:"payment_type_name"`                   //支付类型名称
	PaymentWayName       string `protobuf:"bytes,58,opt,name=payment_way_name,json=paymentWayName,proto3" json:"payment_way_name"`                      //支付通道名称
	StatusName           string `protobuf:"bytes,59,opt,name=status_name,json=statusName,proto3" json:"status_name"`                                    //状态名称
	StatusColor          string `protobuf:"bytes,60,opt,name=status_color,json=statusColor,proto3" json:"status_color"`                                 //状态颜色
	PayStatusName        string `protobuf:"bytes,61,opt,name=pay_status_name,json=payStatusName,proto3" json:"pay_status_name"`                         //状态名称
	LogisticsTypeName    string `protobuf:"bytes,62,opt,name=logistics_type_name,json=logisticsTypeName,proto3" json:"logistics_type_name"`             //物流模式名称
	DeliveryModeName     string `protobuf:"bytes,63,opt,name=delivery_mode_name,json=deliveryModeName,proto3" json:"delivery_mode_name"`                //发货模式名称
}

func (x *OrderInfo) Reset() {
	*x = OrderInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseInfoService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderInfo) ProtoMessage() {}

func (x *OrderInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseInfoService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderInfo.ProtoReflect.Descriptor instead.
func (*OrderInfo) Descriptor() ([]byte, []int) {
	return file_baseInfoService_proto_rawDescGZIP(), []int{3}
}

func (x *OrderInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderInfo) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *OrderInfo) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *OrderInfo) GetShopId() int64 {
	if x != nil {
		return x.ShopId
	}
	return 0
}

func (x *OrderInfo) GetRealstoreId() int64 {
	if x != nil {
		return x.RealstoreId
	}
	return 0
}

func (x *OrderInfo) GetWarehouseId() int64 {
	if x != nil {
		return x.WarehouseId
	}
	return 0
}

func (x *OrderInfo) GetBuyCount() float32 {
	if x != nil {
		return x.BuyCount
	}
	return 0
}

func (x *OrderInfo) GetBuyNumberCount() int64 {
	if x != nil {
		return x.BuyNumberCount
	}
	return 0
}

func (x *OrderInfo) GetBuyWeightCount() int64 {
	if x != nil {
		return x.BuyWeightCount
	}
	return 0
}

func (x *OrderInfo) GetTotalPrice() int64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *OrderInfo) GetActualPrice() int64 {
	if x != nil {
		return x.ActualPrice
	}
	return 0
}

func (x *OrderInfo) GetIncreasePrice() int64 {
	if x != nil {
		return x.IncreasePrice
	}
	return 0
}

func (x *OrderInfo) GetPreferentialPrice() int64 {
	if x != nil {
		return x.PreferentialPrice
	}
	return 0
}

func (x *OrderInfo) GetUseIntegral() int64 {
	if x != nil {
		return x.UseIntegral
	}
	return 0
}

func (x *OrderInfo) GetUseSurplus() int64 {
	if x != nil {
		return x.UseSurplus
	}
	return 0
}

func (x *OrderInfo) GetPaidMoney() int64 {
	if x != nil {
		return x.PaidMoney
	}
	return 0
}

func (x *OrderInfo) GetRefundedMoney() int64 {
	if x != nil {
		return x.RefundedMoney
	}
	return 0
}

func (x *OrderInfo) GetReturnedNumber() int64 {
	if x != nil {
		return x.ReturnedNumber
	}
	return 0
}

func (x *OrderInfo) GetDeliveredNumber() int64 {
	if x != nil {
		return x.DeliveredNumber
	}
	return 0
}

func (x *OrderInfo) GetIntegralDiscountType() string {
	if x != nil {
		return x.IntegralDiscountType
	}
	return ""
}

func (x *OrderInfo) GetIntegralDeductionRate() int64 {
	if x != nil {
		return x.IntegralDeductionRate
	}
	return 0
}

func (x *OrderInfo) GetClientType() string {
	if x != nil {
		return x.ClientType
	}
	return ""
}

func (x *OrderInfo) GetOrderModel() string {
	if x != nil {
		return x.OrderModel
	}
	return ""
}

func (x *OrderInfo) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *OrderInfo) GetCoverUrl() string {
	if x != nil {
		return x.CoverUrl
	}
	return ""
}

func (x *OrderInfo) GetUserNote() string {
	if x != nil {
		return x.UserNote
	}
	return ""
}

func (x *OrderInfo) GetSellerNote() string {
	if x != nil {
		return x.SellerNote
	}
	return ""
}

func (x *OrderInfo) GetLogisticsType() string {
	if x != nil {
		return x.LogisticsType
	}
	return ""
}

func (x *OrderInfo) GetDeliveryMode() string {
	if x != nil {
		return x.DeliveryMode
	}
	return ""
}

func (x *OrderInfo) GetIsAllDelivered() string {
	if x != nil {
		return x.IsAllDelivered
	}
	return ""
}

func (x *OrderInfo) GetIsUnderlinePay() string {
	if x != nil {
		return x.IsUnderlinePay
	}
	return ""
}

func (x *OrderInfo) GetIsCod() string {
	if x != nil {
		return x.IsCod
	}
	return ""
}

func (x *OrderInfo) GetIsInvoiced() string {
	if x != nil {
		return x.IsInvoiced
	}
	return ""
}

func (x *OrderInfo) GetIsRefunded() string {
	if x != nil {
		return x.IsRefunded
	}
	return ""
}

func (x *OrderInfo) GetIsModifyAddress() string {
	if x != nil {
		return x.IsModifyAddress
	}
	return ""
}

func (x *OrderInfo) GetIsModifyPrice() string {
	if x != nil {
		return x.IsModifyPrice
	}
	return ""
}

func (x *OrderInfo) GetPaymentId() int32 {
	if x != nil {
		return x.PaymentId
	}
	return 0
}

func (x *OrderInfo) GetPaymentType() string {
	if x != nil {
		return x.PaymentType
	}
	return ""
}

func (x *OrderInfo) GetPaymentWayCode() string {
	if x != nil {
		return x.PaymentWayCode
	}
	return ""
}

func (x *OrderInfo) GetPayStatus() string {
	if x != nil {
		return x.PayStatus
	}
	return ""
}

func (x *OrderInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrderInfo) GetPayTime() string {
	if x != nil {
		return x.PayTime
	}
	return ""
}

func (x *OrderInfo) GetConfirmTime() string {
	if x != nil {
		return x.ConfirmTime
	}
	return ""
}

func (x *OrderInfo) GetDeliveryTime() string {
	if x != nil {
		return x.DeliveryTime
	}
	return ""
}

func (x *OrderInfo) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *OrderInfo) GetCollectTime() string {
	if x != nil {
		return x.CollectTime
	}
	return ""
}

func (x *OrderInfo) GetCloseTime() string {
	if x != nil {
		return x.CloseTime
	}
	return ""
}

func (x *OrderInfo) GetFinishedTime() string {
	if x != nil {
		return x.FinishedTime
	}
	return ""
}

func (x *OrderInfo) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OrderInfo) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *OrderInfo) GetIsCanLaunchAftersale() bool {
	if x != nil {
		return x.IsCanLaunchAftersale
	}
	return false
}

func (x *OrderInfo) GetClientTypeName() string {
	if x != nil {
		return x.ClientTypeName
	}
	return ""
}

func (x *OrderInfo) GetPaymentTypeName() string {
	if x != nil {
		return x.PaymentTypeName
	}
	return ""
}

func (x *OrderInfo) GetPaymentWayName() string {
	if x != nil {
		return x.PaymentWayName
	}
	return ""
}

func (x *OrderInfo) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *OrderInfo) GetStatusColor() string {
	if x != nil {
		return x.StatusColor
	}
	return ""
}

func (x *OrderInfo) GetPayStatusName() string {
	if x != nil {
		return x.PayStatusName
	}
	return ""
}

func (x *OrderInfo) GetLogisticsTypeName() string {
	if x != nil {
		return x.LogisticsTypeName
	}
	return ""
}

func (x *OrderInfo) GetDeliveryModeName() string {
	if x != nil {
		return x.DeliveryModeName
	}
	return ""
}

type AppNavInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icon  string `protobuf:"bytes,1,opt,name=icon,proto3" json:"icon"`
	Title string `protobuf:"bytes,2,opt,name=title,proto3" json:"title"`
	Url   string `protobuf:"bytes,3,opt,name=url,proto3" json:"url"`
}

func (x *AppNavInfo) Reset() {
	*x = AppNavInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseInfoService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppNavInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppNavInfo) ProtoMessage() {}

func (x *AppNavInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseInfoService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppNavInfo.ProtoReflect.Descriptor instead.
func (*AppNavInfo) Descriptor() ([]byte, []int) {
	return file_baseInfoService_proto_rawDescGZIP(), []int{4}
}

func (x *AppNavInfo) GetIcon() string {
	if x != nil {
		return x.Icon
	}
	return ""
}

func (x *AppNavInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *AppNavInfo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type DictInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name"`
	Value   string `protobuf:"bytes,2,opt,name=value,proto3" json:"value"`
	Class   string `protobuf:"bytes,3,opt,name=class,proto3" json:"class"`
	Checked bool   `protobuf:"varint,4,opt,name=checked,proto3" json:"checked"`
}

func (x *DictInfo) Reset() {
	*x = DictInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_baseInfoService_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DictInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DictInfo) ProtoMessage() {}

func (x *DictInfo) ProtoReflect() protoreflect.Message {
	mi := &file_baseInfoService_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DictInfo.ProtoReflect.Descriptor instead.
func (*DictInfo) Descriptor() ([]byte, []int) {
	return file_baseInfoService_proto_rawDescGZIP(), []int{5}
}

func (x *DictInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DictInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *DictInfo) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

func (x *DictInfo) GetChecked() bool {
	if x != nil {
		return x.Checked
	}
	return false
}

var File_baseInfoService_proto protoreflect.FileDescriptor

var file_baseInfoService_proto_rawDesc = []byte{
	0x0a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x22, 0x81, 0x09, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76,
	0x69, 0x6e, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62,
	0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x76, 0x61, 0x74, 0x61, 0x72, 0x55,
	0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x5f, 0x69, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x6c, 0x12, 0x29, 0x0a, 0x10, 0x6c, 0x6f, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6c, 0x6f,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x2a, 0x0a, 0x11, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x72, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x72, 0x65,
	0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x65, 0x6c, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x65, 0x6c, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73,
	0x5f, 0x73, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x73, 0x53, 0x63, 0x61, 0x74, 0x74, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x74, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69,
	0x73, 0x54, 0x72, 0x75, 0x73, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x65, 0x6d, 0x6f,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x65, 0x6d, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73,
	0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x6f, 0x72, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x08, 0x72, 0x65, 0x66, 0x65, 0x72, 0x72, 0x65, 0x72, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x72, 0x65, 0x72, 0x22, 0x81, 0x13, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x73, 0x68, 0x6f, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73,
	0x68, 0x6f, 0x70, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x61, 0x78, 0x6f, 0x6e, 0x6f, 0x6d,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74, 0x61, 0x78, 0x6f,
	0x6e, 0x6f, 0x6d, 0x79, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x62, 0x72, 0x61, 0x6e, 0x64,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x6d,
	0x70, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x20, 0x0a,
	0x0c, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x6e, 0x79, 0x5f, 0x73, 0x70, 0x65, 0x63, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x4d, 0x61, 0x6e, 0x79, 0x53, 0x70, 0x65, 0x63, 0x12,
	0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x57,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e,
	0x5f, 0x70, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f,
	0x64, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x75,
	0x6e, 0x69, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0f,
	0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x50, 0x6c, 0x75,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x64, 0x65, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x73,
	0x68, 0x65, 0x6c, 0x76, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x53,
	0x68, 0x65, 0x6c, 0x76, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x75, 0x79, 0x12, 0x34, 0x0a, 0x16, 0x69,
	0x73, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x76, 0x65,
	0x6e, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x69, 0x73, 0x44,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x52, 0x69, 0x67, 0x68, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d,
	0x69, 0x6e, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x2c, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x6d, 0x61, 0x78,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x69, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x6d, 0x69, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61,
	0x78, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x61, 0x78, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x6d,
	0x69, 0x6e, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x21, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x62, 0x75, 0x79, 0x4d, 0x69, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0e, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x62, 0x75, 0x79, 0x4d, 0x61, 0x78, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x61, 0x6c,
	0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61,
	0x6c, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x75, 0x74, 0x74, 0x6f,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x62, 0x75, 0x74, 0x74, 0x6f, 0x6e, 0x5f,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x62, 0x75,
	0x74, 0x74, 0x6f, 0x6e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x66, 0x65, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x72, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x46, 0x65, 0x65, 0x12, 0x2e, 0x0a,
	0x13, 0x66, 0x72, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x66, 0x72, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12, 0x2b, 0x0a,
	0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x2e, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x75,
	0x70, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x55, 0x0a, 0x10, 0x66, 0x69,
	0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x30,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x46, 0x69, 0x63, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0f, 0x66, 0x69, 0x63, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x64,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x49, 0x64, 0x12,
	0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6f, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x32, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x6f, 0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x33, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x6f, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12,
	0x19, 0x0a, 0x08, 0x73, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x34, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6f,
	0x72, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x6f, 0x72, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x36, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x5f, 0x61, 0x74, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x61, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x72, 0x61, 0x6e, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x18, 0x4c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1b, 0x0a, 0x09, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x25, 0x0a, 0x0e, 0x6f, 0x72, 0x69, 0x67,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x50, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x51, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x6f, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x52, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x53, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x69, 0x6e, 0x76, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x64, 0x35, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x54, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x35, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x55, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x56,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x57, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18,
	0x58, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x59, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x6f,
	0x6f, 0x64, 0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x5c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x55, 0x72, 0x6c, 0x12, 0x29, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18,
	0x5d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x53, 0x6b, 0x75, 0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x73, 0x70,
	0x65, 0x63, 0x12, 0x27, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x5e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x64, 0x1a, 0x42, 0x0a, 0x14, 0x46, 0x69, 0x63, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x75, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x37, 0x0a, 0x0b, 0x53, 0x6b, 0x75,
	0x53, 0x70, 0x65, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0xda, 0x10, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x68, 0x6f, 0x70,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x73, 0x68, 0x6f, 0x70, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x79, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x62, 0x75, 0x79, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x75, 0x79, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x62, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28,
	0x0a, 0x10, 0x62, 0x75, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x75, 0x79, 0x57, 0x65, 0x69,
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74,
	0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a, 0x0e,
	0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x50, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x49, 0x6e, 0x74,
	0x65, 0x67, 0x72, 0x61, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x73, 0x65, 0x5f, 0x73, 0x75, 0x72,
	0x70, 0x6c, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x75, 0x73, 0x65, 0x53,
	0x75, 0x72, 0x70, 0x6c, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x6d,
	0x6f, 0x6e, 0x65, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x61, 0x69, 0x64,
	0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x25, 0x0a, 0x0e, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65,
	0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x72,
	0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x10, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x65, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x34, 0x0a, 0x16, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61, 0x6c, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x17, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72,
	0x61, 0x6c, 0x5f, 0x64, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x69, 0x6e, 0x74, 0x65, 0x67, 0x72, 0x61,
	0x6c, 0x44, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x6c,
	0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x6e, 0x6f, 0x74, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72,
	0x4e, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x6e,
	0x6f, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x6c, 0x6c, 0x65,
	0x72, 0x4e, 0x6f, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x41,
	0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x69,
	0x73, 0x5f, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x73, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x50, 0x61, 0x79, 0x12, 0x15, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x43, 0x6f, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e, 0x76, 0x6f, 0x69, 0x63, 0x65, 0x64, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x22, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x52, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x12, 0x2a,
	0x0a, 0x11, 0x69, 0x73, 0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x73, 0x4d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73,
	0x5f, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f,
	0x77, 0x61, 0x79, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x69,
	0x76, 0x65, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x30, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x31,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x35,
	0x0a, 0x17, 0x69, 0x73, 0x5f, 0x63, 0x61, 0x6e, 0x5f, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x5f,
	0x61, 0x66, 0x74, 0x65, 0x72, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x37, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x14, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x73, 0x61, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2a, 0x0a, 0x11, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x39, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x77, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x57, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0f, 0x70, 0x61, 0x79,
	0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x12, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x5f, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64,
	0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x48, 0x0a, 0x0a, 0x41, 0x70, 0x70, 0x4e, 0x61, 0x76, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x6f,
	0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x64, 0x0a, 0x08, 0x44, 0x69, 0x63,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x64, 0x42,
	0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_baseInfoService_proto_rawDescOnce sync.Once
	file_baseInfoService_proto_rawDescData = file_baseInfoService_proto_rawDesc
)

func file_baseInfoService_proto_rawDescGZIP() []byte {
	file_baseInfoService_proto_rawDescOnce.Do(func() {
		file_baseInfoService_proto_rawDescData = protoimpl.X.CompressGZIP(file_baseInfoService_proto_rawDescData)
	})
	return file_baseInfoService_proto_rawDescData
}

var file_baseInfoService_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_baseInfoService_proto_goTypes = []interface{}{
	(*MemberInfo)(nil),  // 0: services.MemberInfo
	(*ProductInfo)(nil), // 1: services.ProductInfo
	(*SkuSpecInfo)(nil), // 2: services.SkuSpecInfo
	(*OrderInfo)(nil),   // 3: services.OrderInfo
	(*AppNavInfo)(nil),  // 4: services.AppNavInfo
	(*DictInfo)(nil),    // 5: services.DictInfo
	nil,                 // 6: services.ProductInfo.FictitiousValueEntry
}
var file_baseInfoService_proto_depIdxs = []int32{
	0, // 0: services.MemberInfo.referrer:type_name -> services.MemberInfo
	6, // 1: services.ProductInfo.fictitious_value:type_name -> services.ProductInfo.FictitiousValueEntry
	2, // 2: services.ProductInfo.spec:type_name -> services.SkuSpecInfo
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_baseInfoService_proto_init() }
func file_baseInfoService_proto_init() {
	if File_baseInfoService_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_baseInfoService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MemberInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseInfoService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProductInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseInfoService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuSpecInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseInfoService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseInfoService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppNavInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_baseInfoService_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DictInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_baseInfoService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_baseInfoService_proto_goTypes,
		DependencyIndexes: file_baseInfoService_proto_depIdxs,
		MessageInfos:      file_baseInfoService_proto_msgTypes,
	}.Build()
	File_baseInfoService_proto = out.File
	file_baseInfoService_proto_rawDesc = nil
	file_baseInfoService_proto_goTypes = nil
	file_baseInfoService_proto_depIdxs = nil
}
