// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: shareService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ShareService service

func NewShareServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ShareService service

type ShareService interface {
	//海报分享
	Poster(ctx context.Context, in *ShareRequest, opts ...client.CallOption) (*SharePosterResponse, error)
	//商品分享
	Goods(ctx context.Context, in *ShareRequest, opts ...client.CallOption) (*ShareGoodsResponse, error)
	//刷新海报
	RefreshPoster(ctx context.Context, in *ShareRequest, opts ...client.CallOption) (*SharePosterResponse, error)
}

type shareService struct {
	c    client.Client
	name string
}

func NewShareService(name string, c client.Client) ShareService {
	return &shareService{
		c:    c,
		name: name,
	}
}

func (c *shareService) Poster(ctx context.Context, in *ShareRequest, opts ...client.CallOption) (*SharePosterResponse, error) {
	req := c.c.NewRequest(c.name, "ShareService.Poster", in)
	out := new(SharePosterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareService) Goods(ctx context.Context, in *ShareRequest, opts ...client.CallOption) (*ShareGoodsResponse, error) {
	req := c.c.NewRequest(c.name, "ShareService.Goods", in)
	out := new(ShareGoodsResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shareService) RefreshPoster(ctx context.Context, in *ShareRequest, opts ...client.CallOption) (*SharePosterResponse, error) {
	req := c.c.NewRequest(c.name, "ShareService.RefreshPoster", in)
	out := new(SharePosterResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ShareService service

type ShareServiceHandler interface {
	//海报分享
	Poster(context.Context, *ShareRequest, *SharePosterResponse) error
	//商品分享
	Goods(context.Context, *ShareRequest, *ShareGoodsResponse) error
	//刷新海报
	RefreshPoster(context.Context, *ShareRequest, *SharePosterResponse) error
}

func RegisterShareServiceHandler(s server.Server, hdlr ShareServiceHandler, opts ...server.HandlerOption) error {
	type shareService interface {
		Poster(ctx context.Context, in *ShareRequest, out *SharePosterResponse) error
		Goods(ctx context.Context, in *ShareRequest, out *ShareGoodsResponse) error
		RefreshPoster(ctx context.Context, in *ShareRequest, out *SharePosterResponse) error
	}
	type ShareService struct {
		shareService
	}
	h := &shareServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ShareService{h}, opts...))
}

type shareServiceHandler struct {
	ShareServiceHandler
}

func (h *shareServiceHandler) Poster(ctx context.Context, in *ShareRequest, out *SharePosterResponse) error {
	return h.ShareServiceHandler.Poster(ctx, in, out)
}

func (h *shareServiceHandler) Goods(ctx context.Context, in *ShareRequest, out *ShareGoodsResponse) error {
	return h.ShareServiceHandler.Goods(ctx, in, out)
}

func (h *shareServiceHandler) RefreshPoster(ctx context.Context, in *ShareRequest, out *SharePosterResponse) error {
	return h.ShareServiceHandler.RefreshPoster(ctx, in, out)
}
