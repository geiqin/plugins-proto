// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: distributorService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DistributorService service

func NewDistributorServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DistributorService service

type DistributorService interface {
	//修改分销等级
	UpdateLevel(ctx context.Context, in *Distributor, opts ...client.CallOption) (*DistributorResponse, error)
	//分销人员详情
	Detail(ctx context.Context, in *DistributorRequest, opts ...client.CallOption) (*DistributorResponse, error)
	//分销人员查询
	Search(ctx context.Context, in *DistributorRequest, opts ...client.CallOption) (*DistributorResponse, error)
	//推广客户查询
	PromoteCustomers(ctx context.Context, in *DistributorRequest, opts ...client.CallOption) (*DistributorResponse, error)
}

type distributorService struct {
	c    client.Client
	name string
}

func NewDistributorService(name string, c client.Client) DistributorService {
	return &distributorService{
		c:    c,
		name: name,
	}
}

func (c *distributorService) UpdateLevel(ctx context.Context, in *Distributor, opts ...client.CallOption) (*DistributorResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorService.UpdateLevel", in)
	out := new(DistributorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorService) Detail(ctx context.Context, in *DistributorRequest, opts ...client.CallOption) (*DistributorResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorService.Detail", in)
	out := new(DistributorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorService) Search(ctx context.Context, in *DistributorRequest, opts ...client.CallOption) (*DistributorResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorService.Search", in)
	out := new(DistributorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorService) PromoteCustomers(ctx context.Context, in *DistributorRequest, opts ...client.CallOption) (*DistributorResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorService.PromoteCustomers", in)
	out := new(DistributorResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DistributorService service

type DistributorServiceHandler interface {
	//修改分销等级
	UpdateLevel(context.Context, *Distributor, *DistributorResponse) error
	//分销人员详情
	Detail(context.Context, *DistributorRequest, *DistributorResponse) error
	//分销人员查询
	Search(context.Context, *DistributorRequest, *DistributorResponse) error
	//推广客户查询
	PromoteCustomers(context.Context, *DistributorRequest, *DistributorResponse) error
}

func RegisterDistributorServiceHandler(s server.Server, hdlr DistributorServiceHandler, opts ...server.HandlerOption) error {
	type distributorService interface {
		UpdateLevel(ctx context.Context, in *Distributor, out *DistributorResponse) error
		Detail(ctx context.Context, in *DistributorRequest, out *DistributorResponse) error
		Search(ctx context.Context, in *DistributorRequest, out *DistributorResponse) error
		PromoteCustomers(ctx context.Context, in *DistributorRequest, out *DistributorResponse) error
	}
	type DistributorService struct {
		distributorService
	}
	h := &distributorServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DistributorService{h}, opts...))
}

type distributorServiceHandler struct {
	DistributorServiceHandler
}

func (h *distributorServiceHandler) UpdateLevel(ctx context.Context, in *Distributor, out *DistributorResponse) error {
	return h.DistributorServiceHandler.UpdateLevel(ctx, in, out)
}

func (h *distributorServiceHandler) Detail(ctx context.Context, in *DistributorRequest, out *DistributorResponse) error {
	return h.DistributorServiceHandler.Detail(ctx, in, out)
}

func (h *distributorServiceHandler) Search(ctx context.Context, in *DistributorRequest, out *DistributorResponse) error {
	return h.DistributorServiceHandler.Search(ctx, in, out)
}

func (h *distributorServiceHandler) PromoteCustomers(ctx context.Context, in *DistributorRequest, out *DistributorResponse) error {
	return h.DistributorServiceHandler.PromoteCustomers(ctx, in, out)
}
