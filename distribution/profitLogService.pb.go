// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: profitLogService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProfitLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                  int64       `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                               //ID
	MemberId            int64       `protobuf:"varint,2,opt,name=member_id,json=memberId,proto3" json:"member_id"`                   //用户id
	OrderId             int64       `protobuf:"varint,3,opt,name=order_id,json=orderId,proto3" json:"order_id"`                      //订单ID
	OrderMemberId       int64       `protobuf:"varint,4,opt,name=order_member_id,json=orderMemberId,proto3" json:"order_member_id"`  //订单用户id
	TotalPrice          int64       `protobuf:"varint,5,opt,name=total_price,json=totalPrice,proto3" json:"total_price"`             //订单金额
	ProfitPrice         int64       `protobuf:"varint,6,opt,name=profit_price,json=profitPrice,proto3" json:"profit_price"`          //收益金额
	Rate                float32     `protobuf:"fixed32,7,opt,name=rate,proto3" json:"rate"`                                          //收益比例
	SpecExtends         string      `protobuf:"bytes,8,opt,name=spec_extends,json=specExtends,proto3" json:"spec_extends"`           //订单中所购买的商品对应规格的扩展数据（用于重新计算时候使用）
	Level               int32       `protobuf:"varint,9,opt,name=level,proto3" json:"level"`                                         //当前级别（1~3）0则是向下返佣
	MemberLevelId       int32       `protobuf:"varint,10,opt,name=member_level_id,json=memberLevelId,proto3" json:"member_level_id"` //用户等级id（扩展数据id）
	Msg                 string      `protobuf:"bytes,11,opt,name=msg,proto3" json:"msg"`                                             //描述（一般用于退款描述）
	Status              string      `protobuf:"bytes,12,opt,name=status,proto3" json:"status"`                                       //结算状态（0待生效, 1待结算, 2已结算, 3已失效）
	CreatedAt           string      `protobuf:"bytes,13,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt           string      `protobuf:"bytes,14,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	LevelName           string      `protobuf:"bytes,15,opt,name=level_name,json=levelName,proto3" json:"level_name"`                                   //级别名称
	StatusName          string      `protobuf:"bytes,16,opt,name=status_name,json=statusName,proto3" json:"status_name"`                                //状态名称
	OrderStatusName     string      `protobuf:"bytes,17,opt,name=order_status_name,json=orderStatusName,proto3" json:"order_status_name"`               //订单状态名称
	OrderPayStatusName  string      `protobuf:"bytes,18,opt,name=order_pay_status_name,json=orderPayStatusName,proto3" json:"order_pay_status_name"`    //订单支付状态名称
	OrderClientTypeName string      `protobuf:"bytes,19,opt,name=order_client_type_name,json=orderClientTypeName,proto3" json:"order_client_type_name"` //订单客户端
	OrderNo             string      `protobuf:"bytes,20,opt,name=order_no,json=orderNo,proto3" json:"order_no"`                                         //订单编号
	RefundPrice         int64       `protobuf:"varint,21,opt,name=refund_price,json=refundPrice,proto3" json:"refund_price"`                            //订单退款金额
	Member              *MemberInfo `protobuf:"bytes,22,opt,name=member,proto3" json:"member"`                                                          //用户信息
}

func (x *ProfitLog) Reset() {
	*x = ProfitLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profitLogService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfitLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfitLog) ProtoMessage() {}

func (x *ProfitLog) ProtoReflect() protoreflect.Message {
	mi := &file_profitLogService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfitLog.ProtoReflect.Descriptor instead.
func (*ProfitLog) Descriptor() ([]byte, []int) {
	return file_profitLogService_proto_rawDescGZIP(), []int{0}
}

func (x *ProfitLog) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProfitLog) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *ProfitLog) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ProfitLog) GetOrderMemberId() int64 {
	if x != nil {
		return x.OrderMemberId
	}
	return 0
}

func (x *ProfitLog) GetTotalPrice() int64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *ProfitLog) GetProfitPrice() int64 {
	if x != nil {
		return x.ProfitPrice
	}
	return 0
}

func (x *ProfitLog) GetRate() float32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *ProfitLog) GetSpecExtends() string {
	if x != nil {
		return x.SpecExtends
	}
	return ""
}

func (x *ProfitLog) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *ProfitLog) GetMemberLevelId() int32 {
	if x != nil {
		return x.MemberLevelId
	}
	return 0
}

func (x *ProfitLog) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *ProfitLog) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ProfitLog) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *ProfitLog) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *ProfitLog) GetLevelName() string {
	if x != nil {
		return x.LevelName
	}
	return ""
}

func (x *ProfitLog) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *ProfitLog) GetOrderStatusName() string {
	if x != nil {
		return x.OrderStatusName
	}
	return ""
}

func (x *ProfitLog) GetOrderPayStatusName() string {
	if x != nil {
		return x.OrderPayStatusName
	}
	return ""
}

func (x *ProfitLog) GetOrderClientTypeName() string {
	if x != nil {
		return x.OrderClientTypeName
	}
	return ""
}

func (x *ProfitLog) GetOrderNo() string {
	if x != nil {
		return x.OrderNo
	}
	return ""
}

func (x *ProfitLog) GetRefundPrice() int64 {
	if x != nil {
		return x.RefundPrice
	}
	return 0
}

func (x *ProfitLog) GetMember() *MemberInfo {
	if x != nil {
		return x.Member
	}
	return nil
}

type ProfitLogRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged     int64   `protobuf:"varint,1,opt,name=paged,proto3" json:"paged"`
	PageSize  int64   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Id        int64   `protobuf:"varint,3,opt,name=id,proto3" json:"id"`
	Mobile    string  `protobuf:"bytes,4,opt,name=mobile,proto3" json:"mobile"`
	OrderId   int64   `protobuf:"varint,5,opt,name=order_id,json=orderId,proto3" json:"order_id"`
	OrderSn   string  `protobuf:"bytes,6,opt,name=order_sn,json=orderSn,proto3" json:"order_sn"`
	Keywords  string  `protobuf:"bytes,7,opt,name=keywords,proto3" json:"keywords"`
	Status    string  `protobuf:"bytes,8,opt,name=status,proto3" json:"status"`
	StartDate string  `protobuf:"bytes,9,opt,name=start_date,json=startDate,proto3" json:"start_date"`
	EndDate   string  `protobuf:"bytes,10,opt,name=end_date,json=endDate,proto3" json:"end_date"`
	MemberId  int64   `protobuf:"varint,12,opt,name=member_id,json=memberId,proto3" json:"member_id"`
	LevelId   int32   `protobuf:"varint,13,opt,name=level_id,json=levelId,proto3" json:"level_id"`
	Ids       []int64 `protobuf:"varint,15,rep,packed,name=ids,proto3" json:"ids"`
}

func (x *ProfitLogRequest) Reset() {
	*x = ProfitLogRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profitLogService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfitLogRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfitLogRequest) ProtoMessage() {}

func (x *ProfitLogRequest) ProtoReflect() protoreflect.Message {
	mi := &file_profitLogService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfitLogRequest.ProtoReflect.Descriptor instead.
func (*ProfitLogRequest) Descriptor() ([]byte, []int) {
	return file_profitLogService_proto_rawDescGZIP(), []int{1}
}

func (x *ProfitLogRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *ProfitLogRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *ProfitLogRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProfitLogRequest) GetMobile() string {
	if x != nil {
		return x.Mobile
	}
	return ""
}

func (x *ProfitLogRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *ProfitLogRequest) GetOrderSn() string {
	if x != nil {
		return x.OrderSn
	}
	return ""
}

func (x *ProfitLogRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *ProfitLogRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *ProfitLogRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *ProfitLogRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *ProfitLogRequest) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *ProfitLogRequest) GetLevelId() int32 {
	if x != nil {
		return x.LevelId
	}
	return 0
}

func (x *ProfitLogRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ProfitLogResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *ProfitLog    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager  *common.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Items  []*ProfitLog  `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
	Info   string        `protobuf:"bytes,4,opt,name=info,proto3" json:"info"`
}

func (x *ProfitLogResponse) Reset() {
	*x = ProfitLogResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_profitLogService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProfitLogResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProfitLogResponse) ProtoMessage() {}

func (x *ProfitLogResponse) ProtoReflect() protoreflect.Message {
	mi := &file_profitLogService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProfitLogResponse.ProtoReflect.Descriptor instead.
func (*ProfitLogResponse) Descriptor() ([]byte, []int) {
	return file_profitLogService_proto_rawDescGZIP(), []int{2}
}

func (x *ProfitLogResponse) GetEntity() *ProfitLog {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *ProfitLogResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *ProfitLogResponse) GetItems() []*ProfitLog {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ProfitLogResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

var File_profitLogService_proto protoreflect.FileDescriptor

var file_profitLogService_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdc, 0x05, 0x0a,
	0x09, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x70,
	0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x61,
	0x74, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x6e,
	0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x26, 0x0a, 0x0f, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x76, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x31, 0x0a, 0x15, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x70, 0x61, 0x79, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x16, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6e, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x66, 0x75, 0x6e, 0x64, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x65, 0x66, 0x75, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2c, 0x0a,
	0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xdb, 0x02, 0x0a, 0x10,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x73,
	0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67, 0x65, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x73, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x53,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x0f,
	0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2b, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05,
	0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65,
	0x72, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x32, 0x95, 0x01, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12,
	0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69,
	0x74, 0x4c, 0x6f, 0x67, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x43, 0x0a, 0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c,
	0x6f, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x4c, 0x6f, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_profitLogService_proto_rawDescOnce sync.Once
	file_profitLogService_proto_rawDescData = file_profitLogService_proto_rawDesc
)

func file_profitLogService_proto_rawDescGZIP() []byte {
	file_profitLogService_proto_rawDescOnce.Do(func() {
		file_profitLogService_proto_rawDescData = protoimpl.X.CompressGZIP(file_profitLogService_proto_rawDescData)
	})
	return file_profitLogService_proto_rawDescData
}

var file_profitLogService_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_profitLogService_proto_goTypes = []interface{}{
	(*ProfitLog)(nil),         // 0: services.ProfitLog
	(*ProfitLogRequest)(nil),  // 1: services.ProfitLogRequest
	(*ProfitLogResponse)(nil), // 2: services.ProfitLogResponse
	(*MemberInfo)(nil),        // 3: services.MemberInfo
	(*common.Pager)(nil),      // 4: common.Pager
}
var file_profitLogService_proto_depIdxs = []int32{
	3, // 0: services.ProfitLog.member:type_name -> services.MemberInfo
	0, // 1: services.ProfitLogResponse.entity:type_name -> services.ProfitLog
	4, // 2: services.ProfitLogResponse.pager:type_name -> common.Pager
	0, // 3: services.ProfitLogResponse.items:type_name -> services.ProfitLog
	0, // 4: services.ProfitLogService.Detail:input_type -> services.ProfitLog
	1, // 5: services.ProfitLogService.Search:input_type -> services.ProfitLogRequest
	2, // 6: services.ProfitLogService.Detail:output_type -> services.ProfitLogResponse
	2, // 7: services.ProfitLogService.Search:output_type -> services.ProfitLogResponse
	6, // [6:8] is the sub-list for method output_type
	4, // [4:6] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_profitLogService_proto_init() }
func file_profitLogService_proto_init() {
	if File_profitLogService_proto != nil {
		return
	}
	file_baseInfoService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_profitLogService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfitLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profitLogService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfitLogRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_profitLogService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProfitLogResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_profitLogService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_profitLogService_proto_goTypes,
		DependencyIndexes: file_profitLogService_proto_depIdxs,
		MessageInfos:      file_profitLogService_proto_msgTypes,
	}.Build()
	File_profitLogService_proto = out.File
	file_profitLogService_proto_rawDesc = nil
	file_profitLogService_proto_goTypes = nil
	file_profitLogService_proto_depIdxs = nil
}
