// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: distributorOrderService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DistributorOrderService service

func NewDistributorOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DistributorOrderService service

type DistributorOrderService interface {
	// 获得佣金详情
	Detail(ctx context.Context, in *DistributorOrder, opts ...client.CallOption) (*DistributorOrderResponse, error)
	// 查询佣金列表
	Search(ctx context.Context, in *DistributorOrderRequest, opts ...client.CallOption) (*DistributorOrderResponse, error)
	// 同步拉取订单
	PullOrder(ctx context.Context, in *DistributorOrderRequest, opts ...client.CallOption) (*DistributorOrderResponse, error)
}

type distributorOrderService struct {
	c    client.Client
	name string
}

func NewDistributorOrderService(name string, c client.Client) DistributorOrderService {
	return &distributorOrderService{
		c:    c,
		name: name,
	}
}

func (c *distributorOrderService) Detail(ctx context.Context, in *DistributorOrder, opts ...client.CallOption) (*DistributorOrderResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorOrderService.Detail", in)
	out := new(DistributorOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorOrderService) Search(ctx context.Context, in *DistributorOrderRequest, opts ...client.CallOption) (*DistributorOrderResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorOrderService.Search", in)
	out := new(DistributorOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distributorOrderService) PullOrder(ctx context.Context, in *DistributorOrderRequest, opts ...client.CallOption) (*DistributorOrderResponse, error) {
	req := c.c.NewRequest(c.name, "DistributorOrderService.PullOrder", in)
	out := new(DistributorOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DistributorOrderService service

type DistributorOrderServiceHandler interface {
	// 获得佣金详情
	Detail(context.Context, *DistributorOrder, *DistributorOrderResponse) error
	// 查询佣金列表
	Search(context.Context, *DistributorOrderRequest, *DistributorOrderResponse) error
	// 同步拉取订单
	PullOrder(context.Context, *DistributorOrderRequest, *DistributorOrderResponse) error
}

func RegisterDistributorOrderServiceHandler(s server.Server, hdlr DistributorOrderServiceHandler, opts ...server.HandlerOption) error {
	type distributorOrderService interface {
		Detail(ctx context.Context, in *DistributorOrder, out *DistributorOrderResponse) error
		Search(ctx context.Context, in *DistributorOrderRequest, out *DistributorOrderResponse) error
		PullOrder(ctx context.Context, in *DistributorOrderRequest, out *DistributorOrderResponse) error
	}
	type DistributorOrderService struct {
		distributorOrderService
	}
	h := &distributorOrderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DistributorOrderService{h}, opts...))
}

type distributorOrderServiceHandler struct {
	DistributorOrderServiceHandler
}

func (h *distributorOrderServiceHandler) Detail(ctx context.Context, in *DistributorOrder, out *DistributorOrderResponse) error {
	return h.DistributorOrderServiceHandler.Detail(ctx, in, out)
}

func (h *distributorOrderServiceHandler) Search(ctx context.Context, in *DistributorOrderRequest, out *DistributorOrderResponse) error {
	return h.DistributorOrderServiceHandler.Search(ctx, in, out)
}

func (h *distributorOrderServiceHandler) PullOrder(ctx context.Context, in *DistributorOrderRequest, out *DistributorOrderResponse) error {
	return h.DistributorOrderServiceHandler.PullOrder(ctx, in, out)
}
