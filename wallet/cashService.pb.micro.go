// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cashService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CashService service

func NewCashServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CashService service

type CashService interface {
	//提现创建初始化
	CashCreateInit(ctx context.Context, in *CashRequest, opts ...client.CallOption) (*CashCreateInitResponse, error)
	//提现安全校验
	CashAuth(ctx context.Context, in *CashRequest, opts ...client.CallOption) (*CashAuthResponse, error)
	//提现申请 - 验证码发送
	VerifySend(ctx context.Context, in *CashRequest, opts ...client.CallOption) (*CashResponse, error)
	//提现申请 - 验证码验证
	VerifyCheck(ctx context.Context, in *CashRequest, opts ...client.CallOption) (*CashResponse, error)
}

type cashService struct {
	c    client.Client
	name string
}

func NewCashService(name string, c client.Client) CashService {
	return &cashService{
		c:    c,
		name: name,
	}
}

func (c *cashService) CashCreateInit(ctx context.Context, in *CashRequest, opts ...client.CallOption) (*CashCreateInitResponse, error) {
	req := c.c.NewRequest(c.name, "CashService.CashCreateInit", in)
	out := new(CashCreateInitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashService) CashAuth(ctx context.Context, in *CashRequest, opts ...client.CallOption) (*CashAuthResponse, error) {
	req := c.c.NewRequest(c.name, "CashService.CashAuth", in)
	out := new(CashAuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashService) VerifySend(ctx context.Context, in *CashRequest, opts ...client.CallOption) (*CashResponse, error) {
	req := c.c.NewRequest(c.name, "CashService.VerifySend", in)
	out := new(CashResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashService) VerifyCheck(ctx context.Context, in *CashRequest, opts ...client.CallOption) (*CashResponse, error) {
	req := c.c.NewRequest(c.name, "CashService.VerifyCheck", in)
	out := new(CashResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CashService service

type CashServiceHandler interface {
	//提现创建初始化
	CashCreateInit(context.Context, *CashRequest, *CashCreateInitResponse) error
	//提现安全校验
	CashAuth(context.Context, *CashRequest, *CashAuthResponse) error
	//提现申请 - 验证码发送
	VerifySend(context.Context, *CashRequest, *CashResponse) error
	//提现申请 - 验证码验证
	VerifyCheck(context.Context, *CashRequest, *CashResponse) error
}

func RegisterCashServiceHandler(s server.Server, hdlr CashServiceHandler, opts ...server.HandlerOption) error {
	type cashService interface {
		CashCreateInit(ctx context.Context, in *CashRequest, out *CashCreateInitResponse) error
		CashAuth(ctx context.Context, in *CashRequest, out *CashAuthResponse) error
		VerifySend(ctx context.Context, in *CashRequest, out *CashResponse) error
		VerifyCheck(ctx context.Context, in *CashRequest, out *CashResponse) error
	}
	type CashService struct {
		cashService
	}
	h := &cashServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CashService{h}, opts...))
}

type cashServiceHandler struct {
	CashServiceHandler
}

func (h *cashServiceHandler) CashCreateInit(ctx context.Context, in *CashRequest, out *CashCreateInitResponse) error {
	return h.CashServiceHandler.CashCreateInit(ctx, in, out)
}

func (h *cashServiceHandler) CashAuth(ctx context.Context, in *CashRequest, out *CashAuthResponse) error {
	return h.CashServiceHandler.CashAuth(ctx, in, out)
}

func (h *cashServiceHandler) VerifySend(ctx context.Context, in *CashRequest, out *CashResponse) error {
	return h.CashServiceHandler.VerifySend(ctx, in, out)
}

func (h *cashServiceHandler) VerifyCheck(ctx context.Context, in *CashRequest, out *CashResponse) error {
	return h.CashServiceHandler.VerifyCheck(ctx, in, out)
}
