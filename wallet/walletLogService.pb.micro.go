// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: walletLogService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for WalletLogService service

func NewWalletLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WalletLogService service

type WalletLogService interface {
	//增加钱包日志（同时更新至钱包）【服务专用】
	WalletLogInsert(ctx context.Context, in *WalletLog, opts ...client.CallOption) (*WalletLogResponse, error)
	//获得保证金记录信息
	Get(ctx context.Context, in *WalletLog, opts ...client.CallOption) (*WalletLogResponse, error)
	//查询保证金记录信息
	Search(ctx context.Context, in *WalletLogRequest, opts ...client.CallOption) (*WalletLogResponse, error)
}

type walletLogService struct {
	c    client.Client
	name string
}

func NewWalletLogService(name string, c client.Client) WalletLogService {
	return &walletLogService{
		c:    c,
		name: name,
	}
}

func (c *walletLogService) WalletLogInsert(ctx context.Context, in *WalletLog, opts ...client.CallOption) (*WalletLogResponse, error) {
	req := c.c.NewRequest(c.name, "WalletLogService.WalletLogInsert", in)
	out := new(WalletLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLogService) Get(ctx context.Context, in *WalletLog, opts ...client.CallOption) (*WalletLogResponse, error) {
	req := c.c.NewRequest(c.name, "WalletLogService.Get", in)
	out := new(WalletLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletLogService) Search(ctx context.Context, in *WalletLogRequest, opts ...client.CallOption) (*WalletLogResponse, error) {
	req := c.c.NewRequest(c.name, "WalletLogService.Search", in)
	out := new(WalletLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletLogService service

type WalletLogServiceHandler interface {
	//增加钱包日志（同时更新至钱包）【服务专用】
	WalletLogInsert(context.Context, *WalletLog, *WalletLogResponse) error
	//获得保证金记录信息
	Get(context.Context, *WalletLog, *WalletLogResponse) error
	//查询保证金记录信息
	Search(context.Context, *WalletLogRequest, *WalletLogResponse) error
}

func RegisterWalletLogServiceHandler(s server.Server, hdlr WalletLogServiceHandler, opts ...server.HandlerOption) error {
	type walletLogService interface {
		WalletLogInsert(ctx context.Context, in *WalletLog, out *WalletLogResponse) error
		Get(ctx context.Context, in *WalletLog, out *WalletLogResponse) error
		Search(ctx context.Context, in *WalletLogRequest, out *WalletLogResponse) error
	}
	type WalletLogService struct {
		walletLogService
	}
	h := &walletLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WalletLogService{h}, opts...))
}

type walletLogServiceHandler struct {
	WalletLogServiceHandler
}

func (h *walletLogServiceHandler) WalletLogInsert(ctx context.Context, in *WalletLog, out *WalletLogResponse) error {
	return h.WalletLogServiceHandler.WalletLogInsert(ctx, in, out)
}

func (h *walletLogServiceHandler) Get(ctx context.Context, in *WalletLog, out *WalletLogResponse) error {
	return h.WalletLogServiceHandler.Get(ctx, in, out)
}

func (h *walletLogServiceHandler) Search(ctx context.Context, in *WalletLogRequest, out *WalletLogResponse) error {
	return h.WalletLogServiceHandler.Search(ctx, in, out)
}
