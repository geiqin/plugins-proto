// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cashLogService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CashLogService service

func NewCashLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CashLogService service

type CashLogService interface {
	//提现提交 - 确认
	Create(ctx context.Context, in *CashLog, opts ...client.CallOption) (*CashLogResponse, error)
	//获得提现信息
	Get(ctx context.Context, in *CashLog, opts ...client.CallOption) (*CashLogResponse, error)
	//提现详情
	Detail(ctx context.Context, in *CashLog, opts ...client.CallOption) (*CashLogResponse, error)
	//查询提现信息
	Search(ctx context.Context, in *CashLogRequest, opts ...client.CallOption) (*CashLogResponse, error)
}

type cashLogService struct {
	c    client.Client
	name string
}

func NewCashLogService(name string, c client.Client) CashLogService {
	return &cashLogService{
		c:    c,
		name: name,
	}
}

func (c *cashLogService) Create(ctx context.Context, in *CashLog, opts ...client.CallOption) (*CashLogResponse, error) {
	req := c.c.NewRequest(c.name, "CashLogService.Create", in)
	out := new(CashLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashLogService) Get(ctx context.Context, in *CashLog, opts ...client.CallOption) (*CashLogResponse, error) {
	req := c.c.NewRequest(c.name, "CashLogService.Get", in)
	out := new(CashLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashLogService) Detail(ctx context.Context, in *CashLog, opts ...client.CallOption) (*CashLogResponse, error) {
	req := c.c.NewRequest(c.name, "CashLogService.Detail", in)
	out := new(CashLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashLogService) Search(ctx context.Context, in *CashLogRequest, opts ...client.CallOption) (*CashLogResponse, error) {
	req := c.c.NewRequest(c.name, "CashLogService.Search", in)
	out := new(CashLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CashLogService service

type CashLogServiceHandler interface {
	//提现提交 - 确认
	Create(context.Context, *CashLog, *CashLogResponse) error
	//获得提现信息
	Get(context.Context, *CashLog, *CashLogResponse) error
	//提现详情
	Detail(context.Context, *CashLog, *CashLogResponse) error
	//查询提现信息
	Search(context.Context, *CashLogRequest, *CashLogResponse) error
}

func RegisterCashLogServiceHandler(s server.Server, hdlr CashLogServiceHandler, opts ...server.HandlerOption) error {
	type cashLogService interface {
		Create(ctx context.Context, in *CashLog, out *CashLogResponse) error
		Get(ctx context.Context, in *CashLog, out *CashLogResponse) error
		Detail(ctx context.Context, in *CashLog, out *CashLogResponse) error
		Search(ctx context.Context, in *CashLogRequest, out *CashLogResponse) error
	}
	type CashLogService struct {
		cashLogService
	}
	h := &cashLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CashLogService{h}, opts...))
}

type cashLogServiceHandler struct {
	CashLogServiceHandler
}

func (h *cashLogServiceHandler) Create(ctx context.Context, in *CashLog, out *CashLogResponse) error {
	return h.CashLogServiceHandler.Create(ctx, in, out)
}

func (h *cashLogServiceHandler) Get(ctx context.Context, in *CashLog, out *CashLogResponse) error {
	return h.CashLogServiceHandler.Get(ctx, in, out)
}

func (h *cashLogServiceHandler) Detail(ctx context.Context, in *CashLog, out *CashLogResponse) error {
	return h.CashLogServiceHandler.Detail(ctx, in, out)
}

func (h *cashLogServiceHandler) Search(ctx context.Context, in *CashLogRequest, out *CashLogResponse) error {
	return h.CashLogServiceHandler.Search(ctx, in, out)
}
