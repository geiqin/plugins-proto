// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: walletService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for WalletService service

func NewWalletServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WalletService service

type WalletService interface {
	//生成付款码
	PaymentCode(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletPaymentCodeResponse, error)
	//提现创建初始化
	CashCreateInit(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*CashCreateInitResponse, error)
	//提现安全校验
	CashAuth(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*CashAuthResponse, error)
	//提现申请 - 验证码发送
	VerifySend(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletResponse, error)
	//提现申请 - 验证码验证
	VerifyCheck(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletResponse, error)
	//获取钱包
	Get(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletResponse, error)
	//查询钱包
	Search(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletResponse, error)
}

type walletService struct {
	c    client.Client
	name string
}

func NewWalletService(name string, c client.Client) WalletService {
	return &walletService{
		c:    c,
		name: name,
	}
}

func (c *walletService) PaymentCode(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletPaymentCodeResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.PaymentCode", in)
	out := new(WalletPaymentCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) CashCreateInit(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*CashCreateInitResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.CashCreateInit", in)
	out := new(CashCreateInitResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) CashAuth(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*CashAuthResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.CashAuth", in)
	out := new(CashAuthResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) VerifySend(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.VerifySend", in)
	out := new(WalletResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) VerifyCheck(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.VerifyCheck", in)
	out := new(WalletResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) Get(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.Get", in)
	out := new(WalletResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) Search(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.Search", in)
	out := new(WalletResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletService service

type WalletServiceHandler interface {
	//生成付款码
	PaymentCode(context.Context, *WalletRequest, *WalletPaymentCodeResponse) error
	//提现创建初始化
	CashCreateInit(context.Context, *WalletRequest, *CashCreateInitResponse) error
	//提现安全校验
	CashAuth(context.Context, *WalletRequest, *CashAuthResponse) error
	//提现申请 - 验证码发送
	VerifySend(context.Context, *WalletRequest, *WalletResponse) error
	//提现申请 - 验证码验证
	VerifyCheck(context.Context, *WalletRequest, *WalletResponse) error
	//获取钱包
	Get(context.Context, *WalletRequest, *WalletResponse) error
	//查询钱包
	Search(context.Context, *WalletRequest, *WalletResponse) error
}

func RegisterWalletServiceHandler(s server.Server, hdlr WalletServiceHandler, opts ...server.HandlerOption) error {
	type walletService interface {
		PaymentCode(ctx context.Context, in *WalletRequest, out *WalletPaymentCodeResponse) error
		CashCreateInit(ctx context.Context, in *WalletRequest, out *CashCreateInitResponse) error
		CashAuth(ctx context.Context, in *WalletRequest, out *CashAuthResponse) error
		VerifySend(ctx context.Context, in *WalletRequest, out *WalletResponse) error
		VerifyCheck(ctx context.Context, in *WalletRequest, out *WalletResponse) error
		Get(ctx context.Context, in *WalletRequest, out *WalletResponse) error
		Search(ctx context.Context, in *WalletRequest, out *WalletResponse) error
	}
	type WalletService struct {
		walletService
	}
	h := &walletServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WalletService{h}, opts...))
}

type walletServiceHandler struct {
	WalletServiceHandler
}

func (h *walletServiceHandler) PaymentCode(ctx context.Context, in *WalletRequest, out *WalletPaymentCodeResponse) error {
	return h.WalletServiceHandler.PaymentCode(ctx, in, out)
}

func (h *walletServiceHandler) CashCreateInit(ctx context.Context, in *WalletRequest, out *CashCreateInitResponse) error {
	return h.WalletServiceHandler.CashCreateInit(ctx, in, out)
}

func (h *walletServiceHandler) CashAuth(ctx context.Context, in *WalletRequest, out *CashAuthResponse) error {
	return h.WalletServiceHandler.CashAuth(ctx, in, out)
}

func (h *walletServiceHandler) VerifySend(ctx context.Context, in *WalletRequest, out *WalletResponse) error {
	return h.WalletServiceHandler.VerifySend(ctx, in, out)
}

func (h *walletServiceHandler) VerifyCheck(ctx context.Context, in *WalletRequest, out *WalletResponse) error {
	return h.WalletServiceHandler.VerifyCheck(ctx, in, out)
}

func (h *walletServiceHandler) Get(ctx context.Context, in *WalletRequest, out *WalletResponse) error {
	return h.WalletServiceHandler.Get(ctx, in, out)
}

func (h *walletServiceHandler) Search(ctx context.Context, in *WalletRequest, out *WalletResponse) error {
	return h.WalletServiceHandler.Search(ctx, in, out)
}
