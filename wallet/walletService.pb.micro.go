// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: walletService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for WalletService service

func NewWalletServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for WalletService service

type WalletService interface {
	//生成付款码
	PaymentCode(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletPaymentCodeResponse, error)
	//用户钱包有效金额更新
	NormalMoneyUpdate(ctx context.Context, in *WalletMoneyUpdate, opts ...client.CallOption) (*WalletResponse, error)
	//用户钱包冻结金额更新
	FrozenMoneyUpdate(ctx context.Context, in *WalletMoneyUpdate, opts ...client.CallOption) (*WalletResponse, error)
	//用户钱包赠送金额更新
	GiveMoneyUpdate(ctx context.Context, in *WalletMoneyUpdate, opts ...client.CallOption) (*WalletResponse, error)
	//钱包详情
	Detail(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletResponse, error)
	//钱包查询
	Search(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletResponse, error)
}

type walletService struct {
	c    client.Client
	name string
}

func NewWalletService(name string, c client.Client) WalletService {
	return &walletService{
		c:    c,
		name: name,
	}
}

func (c *walletService) PaymentCode(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletPaymentCodeResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.PaymentCode", in)
	out := new(WalletPaymentCodeResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) NormalMoneyUpdate(ctx context.Context, in *WalletMoneyUpdate, opts ...client.CallOption) (*WalletResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.NormalMoneyUpdate", in)
	out := new(WalletResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) FrozenMoneyUpdate(ctx context.Context, in *WalletMoneyUpdate, opts ...client.CallOption) (*WalletResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.FrozenMoneyUpdate", in)
	out := new(WalletResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) GiveMoneyUpdate(ctx context.Context, in *WalletMoneyUpdate, opts ...client.CallOption) (*WalletResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.GiveMoneyUpdate", in)
	out := new(WalletResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) Detail(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.Detail", in)
	out := new(WalletResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *walletService) Search(ctx context.Context, in *WalletRequest, opts ...client.CallOption) (*WalletResponse, error) {
	req := c.c.NewRequest(c.name, "WalletService.Search", in)
	out := new(WalletResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for WalletService service

type WalletServiceHandler interface {
	//生成付款码
	PaymentCode(context.Context, *WalletRequest, *WalletPaymentCodeResponse) error
	//用户钱包有效金额更新
	NormalMoneyUpdate(context.Context, *WalletMoneyUpdate, *WalletResponse) error
	//用户钱包冻结金额更新
	FrozenMoneyUpdate(context.Context, *WalletMoneyUpdate, *WalletResponse) error
	//用户钱包赠送金额更新
	GiveMoneyUpdate(context.Context, *WalletMoneyUpdate, *WalletResponse) error
	//钱包详情
	Detail(context.Context, *WalletRequest, *WalletResponse) error
	//钱包查询
	Search(context.Context, *WalletRequest, *WalletResponse) error
}

func RegisterWalletServiceHandler(s server.Server, hdlr WalletServiceHandler, opts ...server.HandlerOption) error {
	type walletService interface {
		PaymentCode(ctx context.Context, in *WalletRequest, out *WalletPaymentCodeResponse) error
		NormalMoneyUpdate(ctx context.Context, in *WalletMoneyUpdate, out *WalletResponse) error
		FrozenMoneyUpdate(ctx context.Context, in *WalletMoneyUpdate, out *WalletResponse) error
		GiveMoneyUpdate(ctx context.Context, in *WalletMoneyUpdate, out *WalletResponse) error
		Detail(ctx context.Context, in *WalletRequest, out *WalletResponse) error
		Search(ctx context.Context, in *WalletRequest, out *WalletResponse) error
	}
	type WalletService struct {
		walletService
	}
	h := &walletServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&WalletService{h}, opts...))
}

type walletServiceHandler struct {
	WalletServiceHandler
}

func (h *walletServiceHandler) PaymentCode(ctx context.Context, in *WalletRequest, out *WalletPaymentCodeResponse) error {
	return h.WalletServiceHandler.PaymentCode(ctx, in, out)
}

func (h *walletServiceHandler) NormalMoneyUpdate(ctx context.Context, in *WalletMoneyUpdate, out *WalletResponse) error {
	return h.WalletServiceHandler.NormalMoneyUpdate(ctx, in, out)
}

func (h *walletServiceHandler) FrozenMoneyUpdate(ctx context.Context, in *WalletMoneyUpdate, out *WalletResponse) error {
	return h.WalletServiceHandler.FrozenMoneyUpdate(ctx, in, out)
}

func (h *walletServiceHandler) GiveMoneyUpdate(ctx context.Context, in *WalletMoneyUpdate, out *WalletResponse) error {
	return h.WalletServiceHandler.GiveMoneyUpdate(ctx, in, out)
}

func (h *walletServiceHandler) Detail(ctx context.Context, in *WalletRequest, out *WalletResponse) error {
	return h.WalletServiceHandler.Detail(ctx, in, out)
}

func (h *walletServiceHandler) Search(ctx context.Context, in *WalletRequest, out *WalletResponse) error {
	return h.WalletServiceHandler.Search(ctx, in, out)
}
