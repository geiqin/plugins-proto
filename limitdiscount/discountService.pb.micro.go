// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: discountService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for DiscountService service

func NewDiscountServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for DiscountService service

type DiscountService interface {
	Create(ctx context.Context, in *Discount, opts ...client.CallOption) (*DiscountResponse, error)
	Update(ctx context.Context, in *Discount, opts ...client.CallOption) (*DiscountResponse, error)
	Delete(ctx context.Context, in *Discount, opts ...client.CallOption) (*DiscountResponse, error)
	Stop(ctx context.Context, in *Discount, opts ...client.CallOption) (*DiscountResponse, error)
	Detail(ctx context.Context, in *Discount, opts ...client.CallOption) (*DiscountResponse, error)
	Search(ctx context.Context, in *DiscountRequest, opts ...client.CallOption) (*DiscountResponse, error)
	List(ctx context.Context, in *DiscountRequest, opts ...client.CallOption) (*DiscountResponse, error)
}

type discountService struct {
	c    client.Client
	name string
}

func NewDiscountService(name string, c client.Client) DiscountService {
	return &discountService{
		c:    c,
		name: name,
	}
}

func (c *discountService) Create(ctx context.Context, in *Discount, opts ...client.CallOption) (*DiscountResponse, error) {
	req := c.c.NewRequest(c.name, "DiscountService.Create", in)
	out := new(DiscountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountService) Update(ctx context.Context, in *Discount, opts ...client.CallOption) (*DiscountResponse, error) {
	req := c.c.NewRequest(c.name, "DiscountService.Update", in)
	out := new(DiscountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountService) Delete(ctx context.Context, in *Discount, opts ...client.CallOption) (*DiscountResponse, error) {
	req := c.c.NewRequest(c.name, "DiscountService.Delete", in)
	out := new(DiscountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountService) Stop(ctx context.Context, in *Discount, opts ...client.CallOption) (*DiscountResponse, error) {
	req := c.c.NewRequest(c.name, "DiscountService.Stop", in)
	out := new(DiscountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountService) Detail(ctx context.Context, in *Discount, opts ...client.CallOption) (*DiscountResponse, error) {
	req := c.c.NewRequest(c.name, "DiscountService.Detail", in)
	out := new(DiscountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountService) Search(ctx context.Context, in *DiscountRequest, opts ...client.CallOption) (*DiscountResponse, error) {
	req := c.c.NewRequest(c.name, "DiscountService.Search", in)
	out := new(DiscountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *discountService) List(ctx context.Context, in *DiscountRequest, opts ...client.CallOption) (*DiscountResponse, error) {
	req := c.c.NewRequest(c.name, "DiscountService.List", in)
	out := new(DiscountResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DiscountService service

type DiscountServiceHandler interface {
	Create(context.Context, *Discount, *DiscountResponse) error
	Update(context.Context, *Discount, *DiscountResponse) error
	Delete(context.Context, *Discount, *DiscountResponse) error
	Stop(context.Context, *Discount, *DiscountResponse) error
	Detail(context.Context, *Discount, *DiscountResponse) error
	Search(context.Context, *DiscountRequest, *DiscountResponse) error
	List(context.Context, *DiscountRequest, *DiscountResponse) error
}

func RegisterDiscountServiceHandler(s server.Server, hdlr DiscountServiceHandler, opts ...server.HandlerOption) error {
	type discountService interface {
		Create(ctx context.Context, in *Discount, out *DiscountResponse) error
		Update(ctx context.Context, in *Discount, out *DiscountResponse) error
		Delete(ctx context.Context, in *Discount, out *DiscountResponse) error
		Stop(ctx context.Context, in *Discount, out *DiscountResponse) error
		Detail(ctx context.Context, in *Discount, out *DiscountResponse) error
		Search(ctx context.Context, in *DiscountRequest, out *DiscountResponse) error
		List(ctx context.Context, in *DiscountRequest, out *DiscountResponse) error
	}
	type DiscountService struct {
		discountService
	}
	h := &discountServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&DiscountService{h}, opts...))
}

type discountServiceHandler struct {
	DiscountServiceHandler
}

func (h *discountServiceHandler) Create(ctx context.Context, in *Discount, out *DiscountResponse) error {
	return h.DiscountServiceHandler.Create(ctx, in, out)
}

func (h *discountServiceHandler) Update(ctx context.Context, in *Discount, out *DiscountResponse) error {
	return h.DiscountServiceHandler.Update(ctx, in, out)
}

func (h *discountServiceHandler) Delete(ctx context.Context, in *Discount, out *DiscountResponse) error {
	return h.DiscountServiceHandler.Delete(ctx, in, out)
}

func (h *discountServiceHandler) Stop(ctx context.Context, in *Discount, out *DiscountResponse) error {
	return h.DiscountServiceHandler.Stop(ctx, in, out)
}

func (h *discountServiceHandler) Detail(ctx context.Context, in *Discount, out *DiscountResponse) error {
	return h.DiscountServiceHandler.Detail(ctx, in, out)
}

func (h *discountServiceHandler) Search(ctx context.Context, in *DiscountRequest, out *DiscountResponse) error {
	return h.DiscountServiceHandler.Search(ctx, in, out)
}

func (h *discountServiceHandler) List(ctx context.Context, in *DiscountRequest, out *DiscountResponse) error {
	return h.DiscountServiceHandler.List(ctx, in, out)
}
