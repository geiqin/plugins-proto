// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: configService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ConfigService service

func NewConfigServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ConfigService service

type ConfigService interface {
	//获配置信息
	Get(ctx context.Context, in *LimitDiscountConfig, opts ...client.CallOption) (*ConfigResponse, error)
	//保存配置信息
	Save(ctx context.Context, in *LimitDiscountConfig, opts ...client.CallOption) (*ConfigResponse, error)
	//配送开关：开启/关闭
	Switch(ctx context.Context, in *LimitDiscountConfig, opts ...client.CallOption) (*ConfigResponse, error)
}

type configService struct {
	c    client.Client
	name string
}

func NewConfigService(name string, c client.Client) ConfigService {
	return &configService{
		c:    c,
		name: name,
	}
}

func (c *configService) Get(ctx context.Context, in *LimitDiscountConfig, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigService.Get", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) Save(ctx context.Context, in *LimitDiscountConfig, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigService.Save", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configService) Switch(ctx context.Context, in *LimitDiscountConfig, opts ...client.CallOption) (*ConfigResponse, error) {
	req := c.c.NewRequest(c.name, "ConfigService.Switch", in)
	out := new(ConfigResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConfigService service

type ConfigServiceHandler interface {
	//获配置信息
	Get(context.Context, *LimitDiscountConfig, *ConfigResponse) error
	//保存配置信息
	Save(context.Context, *LimitDiscountConfig, *ConfigResponse) error
	//配送开关：开启/关闭
	Switch(context.Context, *LimitDiscountConfig, *ConfigResponse) error
}

func RegisterConfigServiceHandler(s server.Server, hdlr ConfigServiceHandler, opts ...server.HandlerOption) error {
	type configService interface {
		Get(ctx context.Context, in *LimitDiscountConfig, out *ConfigResponse) error
		Save(ctx context.Context, in *LimitDiscountConfig, out *ConfigResponse) error
		Switch(ctx context.Context, in *LimitDiscountConfig, out *ConfigResponse) error
	}
	type ConfigService struct {
		configService
	}
	h := &configServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ConfigService{h}, opts...))
}

type configServiceHandler struct {
	ConfigServiceHandler
}

func (h *configServiceHandler) Get(ctx context.Context, in *LimitDiscountConfig, out *ConfigResponse) error {
	return h.ConfigServiceHandler.Get(ctx, in, out)
}

func (h *configServiceHandler) Save(ctx context.Context, in *LimitDiscountConfig, out *ConfigResponse) error {
	return h.ConfigServiceHandler.Save(ctx, in, out)
}

func (h *configServiceHandler) Switch(ctx context.Context, in *LimitDiscountConfig, out *ConfigResponse) error {
	return h.ConfigServiceHandler.Switch(ctx, in, out)
}
