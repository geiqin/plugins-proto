// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: commodityService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CommodityService service

func NewCommodityServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CommodityService service

type CommodityService interface {
	Create(ctx context.Context, in *Commodity, opts ...client.CallOption) (*CommodityResponse, error)
	Update(ctx context.Context, in *Commodity, opts ...client.CallOption) (*CommodityResponse, error)
	Delete(ctx context.Context, in *Commodity, opts ...client.CallOption) (*CommodityResponse, error)
	Detail(ctx context.Context, in *Commodity, opts ...client.CallOption) (*CommodityResponse, error)
	Search(ctx context.Context, in *CommodityRequest, opts ...client.CallOption) (*CommodityResponse, error)
	ProductSearch(ctx context.Context, in *CommodityRequest, opts ...client.CallOption) (*ProductSearchResponse, error)
}

type commodityService struct {
	c    client.Client
	name string
}

func NewCommodityService(name string, c client.Client) CommodityService {
	return &commodityService{
		c:    c,
		name: name,
	}
}

func (c *commodityService) Create(ctx context.Context, in *Commodity, opts ...client.CallOption) (*CommodityResponse, error) {
	req := c.c.NewRequest(c.name, "CommodityService.Create", in)
	out := new(CommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) Update(ctx context.Context, in *Commodity, opts ...client.CallOption) (*CommodityResponse, error) {
	req := c.c.NewRequest(c.name, "CommodityService.Update", in)
	out := new(CommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) Delete(ctx context.Context, in *Commodity, opts ...client.CallOption) (*CommodityResponse, error) {
	req := c.c.NewRequest(c.name, "CommodityService.Delete", in)
	out := new(CommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) Detail(ctx context.Context, in *Commodity, opts ...client.CallOption) (*CommodityResponse, error) {
	req := c.c.NewRequest(c.name, "CommodityService.Detail", in)
	out := new(CommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) Search(ctx context.Context, in *CommodityRequest, opts ...client.CallOption) (*CommodityResponse, error) {
	req := c.c.NewRequest(c.name, "CommodityService.Search", in)
	out := new(CommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commodityService) ProductSearch(ctx context.Context, in *CommodityRequest, opts ...client.CallOption) (*ProductSearchResponse, error) {
	req := c.c.NewRequest(c.name, "CommodityService.ProductSearch", in)
	out := new(ProductSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommodityService service

type CommodityServiceHandler interface {
	Create(context.Context, *Commodity, *CommodityResponse) error
	Update(context.Context, *Commodity, *CommodityResponse) error
	Delete(context.Context, *Commodity, *CommodityResponse) error
	Detail(context.Context, *Commodity, *CommodityResponse) error
	Search(context.Context, *CommodityRequest, *CommodityResponse) error
	ProductSearch(context.Context, *CommodityRequest, *ProductSearchResponse) error
}

func RegisterCommodityServiceHandler(s server.Server, hdlr CommodityServiceHandler, opts ...server.HandlerOption) error {
	type commodityService interface {
		Create(ctx context.Context, in *Commodity, out *CommodityResponse) error
		Update(ctx context.Context, in *Commodity, out *CommodityResponse) error
		Delete(ctx context.Context, in *Commodity, out *CommodityResponse) error
		Detail(ctx context.Context, in *Commodity, out *CommodityResponse) error
		Search(ctx context.Context, in *CommodityRequest, out *CommodityResponse) error
		ProductSearch(ctx context.Context, in *CommodityRequest, out *ProductSearchResponse) error
	}
	type CommodityService struct {
		commodityService
	}
	h := &commodityServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CommodityService{h}, opts...))
}

type commodityServiceHandler struct {
	CommodityServiceHandler
}

func (h *commodityServiceHandler) Create(ctx context.Context, in *Commodity, out *CommodityResponse) error {
	return h.CommodityServiceHandler.Create(ctx, in, out)
}

func (h *commodityServiceHandler) Update(ctx context.Context, in *Commodity, out *CommodityResponse) error {
	return h.CommodityServiceHandler.Update(ctx, in, out)
}

func (h *commodityServiceHandler) Delete(ctx context.Context, in *Commodity, out *CommodityResponse) error {
	return h.CommodityServiceHandler.Delete(ctx, in, out)
}

func (h *commodityServiceHandler) Detail(ctx context.Context, in *Commodity, out *CommodityResponse) error {
	return h.CommodityServiceHandler.Detail(ctx, in, out)
}

func (h *commodityServiceHandler) Search(ctx context.Context, in *CommodityRequest, out *CommodityResponse) error {
	return h.CommodityServiceHandler.Search(ctx, in, out)
}

func (h *commodityServiceHandler) ProductSearch(ctx context.Context, in *CommodityRequest, out *ProductSearchResponse) error {
	return h.CommodityServiceHandler.ProductSearch(ctx, in, out)
}
