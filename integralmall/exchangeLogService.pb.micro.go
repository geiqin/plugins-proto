// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: exchangeLogService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ExchangeLogService service

func NewExchangeLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ExchangeLogService service

type ExchangeLogService interface {
	//物流信息详情
	Detail(ctx context.Context, in *ExchangeLog, opts ...client.CallOption) (*ExchangeLogResponse, error)
	//查询物流信息
	Search(ctx context.Context, in *ExchangeLogRequest, opts ...client.CallOption) (*ExchangeLogResponse, error)
}

type exchangeLogService struct {
	c    client.Client
	name string
}

func NewExchangeLogService(name string, c client.Client) ExchangeLogService {
	return &exchangeLogService{
		c:    c,
		name: name,
	}
}

func (c *exchangeLogService) Detail(ctx context.Context, in *ExchangeLog, opts ...client.CallOption) (*ExchangeLogResponse, error) {
	req := c.c.NewRequest(c.name, "ExchangeLogService.Detail", in)
	out := new(ExchangeLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exchangeLogService) Search(ctx context.Context, in *ExchangeLogRequest, opts ...client.CallOption) (*ExchangeLogResponse, error) {
	req := c.c.NewRequest(c.name, "ExchangeLogService.Search", in)
	out := new(ExchangeLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ExchangeLogService service

type ExchangeLogServiceHandler interface {
	//物流信息详情
	Detail(context.Context, *ExchangeLog, *ExchangeLogResponse) error
	//查询物流信息
	Search(context.Context, *ExchangeLogRequest, *ExchangeLogResponse) error
}

func RegisterExchangeLogServiceHandler(s server.Server, hdlr ExchangeLogServiceHandler, opts ...server.HandlerOption) error {
	type exchangeLogService interface {
		Detail(ctx context.Context, in *ExchangeLog, out *ExchangeLogResponse) error
		Search(ctx context.Context, in *ExchangeLogRequest, out *ExchangeLogResponse) error
	}
	type ExchangeLogService struct {
		exchangeLogService
	}
	h := &exchangeLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ExchangeLogService{h}, opts...))
}

type exchangeLogServiceHandler struct {
	ExchangeLogServiceHandler
}

func (h *exchangeLogServiceHandler) Detail(ctx context.Context, in *ExchangeLog, out *ExchangeLogResponse) error {
	return h.ExchangeLogServiceHandler.Detail(ctx, in, out)
}

func (h *exchangeLogServiceHandler) Search(ctx context.Context, in *ExchangeLogRequest, out *ExchangeLogResponse) error {
	return h.ExchangeLogServiceHandler.Search(ctx, in, out)
}
