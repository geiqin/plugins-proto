// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: integralCommodityService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for IntegralCommodityService service

func NewIntegralCommodityServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for IntegralCommodityService service

type IntegralCommodityService interface {
	Create(ctx context.Context, in *IntegralCommodity, opts ...client.CallOption) (*IntegralCommodityResponse, error)
	Update(ctx context.Context, in *IntegralCommodity, opts ...client.CallOption) (*IntegralCommodityResponse, error)
	Delete(ctx context.Context, in *IntegralCommodity, opts ...client.CallOption) (*IntegralCommodityResponse, error)
	Detail(ctx context.Context, in *IntegralCommodity, opts ...client.CallOption) (*IntegralCommodityResponse, error)
	Search(ctx context.Context, in *IntegralCommodityRequest, opts ...client.CallOption) (*IntegralCommodityResponse, error)
	ProductSearch(ctx context.Context, in *IntegralCommodityRequest, opts ...client.CallOption) (*ProductSearchResponse, error)
}

type integralCommodityService struct {
	c    client.Client
	name string
}

func NewIntegralCommodityService(name string, c client.Client) IntegralCommodityService {
	return &integralCommodityService{
		c:    c,
		name: name,
	}
}

func (c *integralCommodityService) Create(ctx context.Context, in *IntegralCommodity, opts ...client.CallOption) (*IntegralCommodityResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralCommodityService.Create", in)
	out := new(IntegralCommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralCommodityService) Update(ctx context.Context, in *IntegralCommodity, opts ...client.CallOption) (*IntegralCommodityResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralCommodityService.Update", in)
	out := new(IntegralCommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralCommodityService) Delete(ctx context.Context, in *IntegralCommodity, opts ...client.CallOption) (*IntegralCommodityResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralCommodityService.Delete", in)
	out := new(IntegralCommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralCommodityService) Detail(ctx context.Context, in *IntegralCommodity, opts ...client.CallOption) (*IntegralCommodityResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralCommodityService.Detail", in)
	out := new(IntegralCommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralCommodityService) Search(ctx context.Context, in *IntegralCommodityRequest, opts ...client.CallOption) (*IntegralCommodityResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralCommodityService.Search", in)
	out := new(IntegralCommodityResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralCommodityService) ProductSearch(ctx context.Context, in *IntegralCommodityRequest, opts ...client.CallOption) (*ProductSearchResponse, error) {
	req := c.c.NewRequest(c.name, "IntegralCommodityService.ProductSearch", in)
	out := new(ProductSearchResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IntegralCommodityService service

type IntegralCommodityServiceHandler interface {
	Create(context.Context, *IntegralCommodity, *IntegralCommodityResponse) error
	Update(context.Context, *IntegralCommodity, *IntegralCommodityResponse) error
	Delete(context.Context, *IntegralCommodity, *IntegralCommodityResponse) error
	Detail(context.Context, *IntegralCommodity, *IntegralCommodityResponse) error
	Search(context.Context, *IntegralCommodityRequest, *IntegralCommodityResponse) error
	ProductSearch(context.Context, *IntegralCommodityRequest, *ProductSearchResponse) error
}

func RegisterIntegralCommodityServiceHandler(s server.Server, hdlr IntegralCommodityServiceHandler, opts ...server.HandlerOption) error {
	type integralCommodityService interface {
		Create(ctx context.Context, in *IntegralCommodity, out *IntegralCommodityResponse) error
		Update(ctx context.Context, in *IntegralCommodity, out *IntegralCommodityResponse) error
		Delete(ctx context.Context, in *IntegralCommodity, out *IntegralCommodityResponse) error
		Detail(ctx context.Context, in *IntegralCommodity, out *IntegralCommodityResponse) error
		Search(ctx context.Context, in *IntegralCommodityRequest, out *IntegralCommodityResponse) error
		ProductSearch(ctx context.Context, in *IntegralCommodityRequest, out *ProductSearchResponse) error
	}
	type IntegralCommodityService struct {
		integralCommodityService
	}
	h := &integralCommodityServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&IntegralCommodityService{h}, opts...))
}

type integralCommodityServiceHandler struct {
	IntegralCommodityServiceHandler
}

func (h *integralCommodityServiceHandler) Create(ctx context.Context, in *IntegralCommodity, out *IntegralCommodityResponse) error {
	return h.IntegralCommodityServiceHandler.Create(ctx, in, out)
}

func (h *integralCommodityServiceHandler) Update(ctx context.Context, in *IntegralCommodity, out *IntegralCommodityResponse) error {
	return h.IntegralCommodityServiceHandler.Update(ctx, in, out)
}

func (h *integralCommodityServiceHandler) Delete(ctx context.Context, in *IntegralCommodity, out *IntegralCommodityResponse) error {
	return h.IntegralCommodityServiceHandler.Delete(ctx, in, out)
}

func (h *integralCommodityServiceHandler) Detail(ctx context.Context, in *IntegralCommodity, out *IntegralCommodityResponse) error {
	return h.IntegralCommodityServiceHandler.Detail(ctx, in, out)
}

func (h *integralCommodityServiceHandler) Search(ctx context.Context, in *IntegralCommodityRequest, out *IntegralCommodityResponse) error {
	return h.IntegralCommodityServiceHandler.Search(ctx, in, out)
}

func (h *integralCommodityServiceHandler) ProductSearch(ctx context.Context, in *IntegralCommodityRequest, out *ProductSearchResponse) error {
	return h.IntegralCommodityServiceHandler.ProductSearch(ctx, in, out)
}
