// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: goodsCategoryService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GoodsCategoryService service

func NewGoodsCategoryServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GoodsCategoryService service

type GoodsCategoryService interface {
	Create(ctx context.Context, in *GoodsCategory, opts ...client.CallOption) (*GoodsCategoryResponse, error)
	Update(ctx context.Context, in *GoodsCategory, opts ...client.CallOption) (*GoodsCategoryResponse, error)
	Delete(ctx context.Context, in *GoodsCategory, opts ...client.CallOption) (*GoodsCategoryResponse, error)
	Detail(ctx context.Context, in *GoodsCategory, opts ...client.CallOption) (*GoodsCategoryResponse, error)
	Tree(ctx context.Context, in *GoodsCategoryRequest, opts ...client.CallOption) (*GoodsCategoryResponse, error)
	Search(ctx context.Context, in *GoodsCategoryRequest, opts ...client.CallOption) (*GoodsCategoryResponse, error)
}

type goodsCategoryService struct {
	c    client.Client
	name string
}

func NewGoodsCategoryService(name string, c client.Client) GoodsCategoryService {
	return &goodsCategoryService{
		c:    c,
		name: name,
	}
}

func (c *goodsCategoryService) Create(ctx context.Context, in *GoodsCategory, opts ...client.CallOption) (*GoodsCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "GoodsCategoryService.Create", in)
	out := new(GoodsCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsCategoryService) Update(ctx context.Context, in *GoodsCategory, opts ...client.CallOption) (*GoodsCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "GoodsCategoryService.Update", in)
	out := new(GoodsCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsCategoryService) Delete(ctx context.Context, in *GoodsCategory, opts ...client.CallOption) (*GoodsCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "GoodsCategoryService.Delete", in)
	out := new(GoodsCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsCategoryService) Detail(ctx context.Context, in *GoodsCategory, opts ...client.CallOption) (*GoodsCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "GoodsCategoryService.Detail", in)
	out := new(GoodsCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsCategoryService) Tree(ctx context.Context, in *GoodsCategoryRequest, opts ...client.CallOption) (*GoodsCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "GoodsCategoryService.Tree", in)
	out := new(GoodsCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goodsCategoryService) Search(ctx context.Context, in *GoodsCategoryRequest, opts ...client.CallOption) (*GoodsCategoryResponse, error) {
	req := c.c.NewRequest(c.name, "GoodsCategoryService.Search", in)
	out := new(GoodsCategoryResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GoodsCategoryService service

type GoodsCategoryServiceHandler interface {
	Create(context.Context, *GoodsCategory, *GoodsCategoryResponse) error
	Update(context.Context, *GoodsCategory, *GoodsCategoryResponse) error
	Delete(context.Context, *GoodsCategory, *GoodsCategoryResponse) error
	Detail(context.Context, *GoodsCategory, *GoodsCategoryResponse) error
	Tree(context.Context, *GoodsCategoryRequest, *GoodsCategoryResponse) error
	Search(context.Context, *GoodsCategoryRequest, *GoodsCategoryResponse) error
}

func RegisterGoodsCategoryServiceHandler(s server.Server, hdlr GoodsCategoryServiceHandler, opts ...server.HandlerOption) error {
	type goodsCategoryService interface {
		Create(ctx context.Context, in *GoodsCategory, out *GoodsCategoryResponse) error
		Update(ctx context.Context, in *GoodsCategory, out *GoodsCategoryResponse) error
		Delete(ctx context.Context, in *GoodsCategory, out *GoodsCategoryResponse) error
		Detail(ctx context.Context, in *GoodsCategory, out *GoodsCategoryResponse) error
		Tree(ctx context.Context, in *GoodsCategoryRequest, out *GoodsCategoryResponse) error
		Search(ctx context.Context, in *GoodsCategoryRequest, out *GoodsCategoryResponse) error
	}
	type GoodsCategoryService struct {
		goodsCategoryService
	}
	h := &goodsCategoryServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GoodsCategoryService{h}, opts...))
}

type goodsCategoryServiceHandler struct {
	GoodsCategoryServiceHandler
}

func (h *goodsCategoryServiceHandler) Create(ctx context.Context, in *GoodsCategory, out *GoodsCategoryResponse) error {
	return h.GoodsCategoryServiceHandler.Create(ctx, in, out)
}

func (h *goodsCategoryServiceHandler) Update(ctx context.Context, in *GoodsCategory, out *GoodsCategoryResponse) error {
	return h.GoodsCategoryServiceHandler.Update(ctx, in, out)
}

func (h *goodsCategoryServiceHandler) Delete(ctx context.Context, in *GoodsCategory, out *GoodsCategoryResponse) error {
	return h.GoodsCategoryServiceHandler.Delete(ctx, in, out)
}

func (h *goodsCategoryServiceHandler) Detail(ctx context.Context, in *GoodsCategory, out *GoodsCategoryResponse) error {
	return h.GoodsCategoryServiceHandler.Detail(ctx, in, out)
}

func (h *goodsCategoryServiceHandler) Tree(ctx context.Context, in *GoodsCategoryRequest, out *GoodsCategoryResponse) error {
	return h.GoodsCategoryServiceHandler.Tree(ctx, in, out)
}

func (h *goodsCategoryServiceHandler) Search(ctx context.Context, in *GoodsCategoryRequest, out *GoodsCategoryResponse) error {
	return h.GoodsCategoryServiceHandler.Search(ctx, in, out)
}
