// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: purchaseService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PurchaseService service

func NewPurchaseServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PurchaseService service

type PurchaseService interface {
	//购物车更新
	CartUpdate(ctx context.Context, in *Cart, opts ...client.CallOption) (*PurchaseResponse, error)
	//购物车提交
	CartSubmit(ctx context.Context, in *Cart, opts ...client.CallOption) (*PurchaseResponse, error)
	//订单支付
	OrderPay(ctx context.Context, in *PurchaseRequest, opts ...client.CallOption) (*PurchaseResponse, error)
	//商品搜索
	GoodsSearch(ctx context.Context, in *UserGoodsRequest, opts ...client.CallOption) (*PurchaseResponse, error)
	//商品规格
	GoodsSpec(ctx context.Context, in *UserGoodsRequest, opts ...client.CallOption) (*PurchaseResponse, error)
	//用户地址
	UserAddress(ctx context.Context, in *PurchaseRequest, opts ...client.CallOption) (*PurchaseResponse, error)
}

type purchaseService struct {
	c    client.Client
	name string
}

func NewPurchaseService(name string, c client.Client) PurchaseService {
	return &purchaseService{
		c:    c,
		name: name,
	}
}

func (c *purchaseService) CartUpdate(ctx context.Context, in *Cart, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseService.CartUpdate", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseService) CartSubmit(ctx context.Context, in *Cart, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseService.CartSubmit", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseService) OrderPay(ctx context.Context, in *PurchaseRequest, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseService.OrderPay", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseService) GoodsSearch(ctx context.Context, in *UserGoodsRequest, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseService.GoodsSearch", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseService) GoodsSpec(ctx context.Context, in *UserGoodsRequest, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseService.GoodsSpec", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseService) UserAddress(ctx context.Context, in *PurchaseRequest, opts ...client.CallOption) (*PurchaseResponse, error) {
	req := c.c.NewRequest(c.name, "PurchaseService.UserAddress", in)
	out := new(PurchaseResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PurchaseService service

type PurchaseServiceHandler interface {
	//购物车更新
	CartUpdate(context.Context, *Cart, *PurchaseResponse) error
	//购物车提交
	CartSubmit(context.Context, *Cart, *PurchaseResponse) error
	//订单支付
	OrderPay(context.Context, *PurchaseRequest, *PurchaseResponse) error
	//商品搜索
	GoodsSearch(context.Context, *UserGoodsRequest, *PurchaseResponse) error
	//商品规格
	GoodsSpec(context.Context, *UserGoodsRequest, *PurchaseResponse) error
	//用户地址
	UserAddress(context.Context, *PurchaseRequest, *PurchaseResponse) error
}

func RegisterPurchaseServiceHandler(s server.Server, hdlr PurchaseServiceHandler, opts ...server.HandlerOption) error {
	type purchaseService interface {
		CartUpdate(ctx context.Context, in *Cart, out *PurchaseResponse) error
		CartSubmit(ctx context.Context, in *Cart, out *PurchaseResponse) error
		OrderPay(ctx context.Context, in *PurchaseRequest, out *PurchaseResponse) error
		GoodsSearch(ctx context.Context, in *UserGoodsRequest, out *PurchaseResponse) error
		GoodsSpec(ctx context.Context, in *UserGoodsRequest, out *PurchaseResponse) error
		UserAddress(ctx context.Context, in *PurchaseRequest, out *PurchaseResponse) error
	}
	type PurchaseService struct {
		purchaseService
	}
	h := &purchaseServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PurchaseService{h}, opts...))
}

type purchaseServiceHandler struct {
	PurchaseServiceHandler
}

func (h *purchaseServiceHandler) CartUpdate(ctx context.Context, in *Cart, out *PurchaseResponse) error {
	return h.PurchaseServiceHandler.CartUpdate(ctx, in, out)
}

func (h *purchaseServiceHandler) CartSubmit(ctx context.Context, in *Cart, out *PurchaseResponse) error {
	return h.PurchaseServiceHandler.CartSubmit(ctx, in, out)
}

func (h *purchaseServiceHandler) OrderPay(ctx context.Context, in *PurchaseRequest, out *PurchaseResponse) error {
	return h.PurchaseServiceHandler.OrderPay(ctx, in, out)
}

func (h *purchaseServiceHandler) GoodsSearch(ctx context.Context, in *UserGoodsRequest, out *PurchaseResponse) error {
	return h.PurchaseServiceHandler.GoodsSearch(ctx, in, out)
}

func (h *purchaseServiceHandler) GoodsSpec(ctx context.Context, in *UserGoodsRequest, out *PurchaseResponse) error {
	return h.PurchaseServiceHandler.GoodsSpec(ctx, in, out)
}

func (h *purchaseServiceHandler) UserAddress(ctx context.Context, in *PurchaseRequest, out *PurchaseResponse) error {
	return h.PurchaseServiceHandler.UserAddress(ctx, in, out)
}
