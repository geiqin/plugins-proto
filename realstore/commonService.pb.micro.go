// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: commonService.proto

package services

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CommonService service

func NewCommonServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CommonService service

type CommonService interface {
	//配置中心
	ConfigIndex(ctx context.Context, in *RealstoreConfig, opts ...client.CallOption) (*CommonResponse, error)
	//保存配置
	ConfigSave(ctx context.Context, in *RealstoreConfig, opts ...client.CallOption) (*CommonResponse, error)
	//字典列表
	Dictionary(ctx context.Context, in *CommonRequest, opts ...client.CallOption) (*CommonResponse, error)
}

type commonService struct {
	c    client.Client
	name string
}

func NewCommonService(name string, c client.Client) CommonService {
	return &commonService{
		c:    c,
		name: name,
	}
}

func (c *commonService) ConfigIndex(ctx context.Context, in *RealstoreConfig, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "CommonService.ConfigIndex", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonService) ConfigSave(ctx context.Context, in *RealstoreConfig, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "CommonService.ConfigSave", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commonService) Dictionary(ctx context.Context, in *CommonRequest, opts ...client.CallOption) (*CommonResponse, error) {
	req := c.c.NewRequest(c.name, "CommonService.Dictionary", in)
	out := new(CommonResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CommonService service

type CommonServiceHandler interface {
	//配置中心
	ConfigIndex(context.Context, *RealstoreConfig, *CommonResponse) error
	//保存配置
	ConfigSave(context.Context, *RealstoreConfig, *CommonResponse) error
	//字典列表
	Dictionary(context.Context, *CommonRequest, *CommonResponse) error
}

func RegisterCommonServiceHandler(s server.Server, hdlr CommonServiceHandler, opts ...server.HandlerOption) error {
	type commonService interface {
		ConfigIndex(ctx context.Context, in *RealstoreConfig, out *CommonResponse) error
		ConfigSave(ctx context.Context, in *RealstoreConfig, out *CommonResponse) error
		Dictionary(ctx context.Context, in *CommonRequest, out *CommonResponse) error
	}
	type CommonService struct {
		commonService
	}
	h := &commonServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CommonService{h}, opts...))
}

type commonServiceHandler struct {
	CommonServiceHandler
}

func (h *commonServiceHandler) ConfigIndex(ctx context.Context, in *RealstoreConfig, out *CommonResponse) error {
	return h.CommonServiceHandler.ConfigIndex(ctx, in, out)
}

func (h *commonServiceHandler) ConfigSave(ctx context.Context, in *RealstoreConfig, out *CommonResponse) error {
	return h.CommonServiceHandler.ConfigSave(ctx, in, out)
}

func (h *commonServiceHandler) Dictionary(ctx context.Context, in *CommonRequest, out *CommonResponse) error {
	return h.CommonServiceHandler.Dictionary(ctx, in, out)
}
