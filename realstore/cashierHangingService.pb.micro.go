// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: cashierHangingService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CashierHangingService service

func NewCashierHangingServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CashierHangingService service

type CashierHangingService interface {
	//挂单保存
	Save(ctx context.Context, in *CashierHanging, opts ...client.CallOption) (*CashierHangingResponse, error)
	//挂单取出
	Get(ctx context.Context, in *CashierHanging, opts ...client.CallOption) (*CashierHangingResponse, error)
	//挂单总数
	Count(ctx context.Context, in *CashierHanging, opts ...client.CallOption) (*CashierHangingResponse, error)
	//挂单清空
	Clear(ctx context.Context, in *CashierHanging, opts ...client.CallOption) (*CashierHangingResponse, error)
	//挂单删除
	Delete(ctx context.Context, in *CashierHanging, opts ...client.CallOption) (*CashierHangingResponse, error)
	//挂单详情
	Detail(ctx context.Context, in *CashierHanging, opts ...client.CallOption) (*CashierHangingResponse, error)
	//挂单查询
	Search(ctx context.Context, in *CashierHangingRequest, opts ...client.CallOption) (*CashierHangingResponse, error)
}

type cashierHangingService struct {
	c    client.Client
	name string
}

func NewCashierHangingService(name string, c client.Client) CashierHangingService {
	return &cashierHangingService{
		c:    c,
		name: name,
	}
}

func (c *cashierHangingService) Save(ctx context.Context, in *CashierHanging, opts ...client.CallOption) (*CashierHangingResponse, error) {
	req := c.c.NewRequest(c.name, "CashierHangingService.Save", in)
	out := new(CashierHangingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierHangingService) Get(ctx context.Context, in *CashierHanging, opts ...client.CallOption) (*CashierHangingResponse, error) {
	req := c.c.NewRequest(c.name, "CashierHangingService.Get", in)
	out := new(CashierHangingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierHangingService) Count(ctx context.Context, in *CashierHanging, opts ...client.CallOption) (*CashierHangingResponse, error) {
	req := c.c.NewRequest(c.name, "CashierHangingService.Count", in)
	out := new(CashierHangingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierHangingService) Clear(ctx context.Context, in *CashierHanging, opts ...client.CallOption) (*CashierHangingResponse, error) {
	req := c.c.NewRequest(c.name, "CashierHangingService.Clear", in)
	out := new(CashierHangingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierHangingService) Delete(ctx context.Context, in *CashierHanging, opts ...client.CallOption) (*CashierHangingResponse, error) {
	req := c.c.NewRequest(c.name, "CashierHangingService.Delete", in)
	out := new(CashierHangingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierHangingService) Detail(ctx context.Context, in *CashierHanging, opts ...client.CallOption) (*CashierHangingResponse, error) {
	req := c.c.NewRequest(c.name, "CashierHangingService.Detail", in)
	out := new(CashierHangingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cashierHangingService) Search(ctx context.Context, in *CashierHangingRequest, opts ...client.CallOption) (*CashierHangingResponse, error) {
	req := c.c.NewRequest(c.name, "CashierHangingService.Search", in)
	out := new(CashierHangingResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CashierHangingService service

type CashierHangingServiceHandler interface {
	//挂单保存
	Save(context.Context, *CashierHanging, *CashierHangingResponse) error
	//挂单取出
	Get(context.Context, *CashierHanging, *CashierHangingResponse) error
	//挂单总数
	Count(context.Context, *CashierHanging, *CashierHangingResponse) error
	//挂单清空
	Clear(context.Context, *CashierHanging, *CashierHangingResponse) error
	//挂单删除
	Delete(context.Context, *CashierHanging, *CashierHangingResponse) error
	//挂单详情
	Detail(context.Context, *CashierHanging, *CashierHangingResponse) error
	//挂单查询
	Search(context.Context, *CashierHangingRequest, *CashierHangingResponse) error
}

func RegisterCashierHangingServiceHandler(s server.Server, hdlr CashierHangingServiceHandler, opts ...server.HandlerOption) error {
	type cashierHangingService interface {
		Save(ctx context.Context, in *CashierHanging, out *CashierHangingResponse) error
		Get(ctx context.Context, in *CashierHanging, out *CashierHangingResponse) error
		Count(ctx context.Context, in *CashierHanging, out *CashierHangingResponse) error
		Clear(ctx context.Context, in *CashierHanging, out *CashierHangingResponse) error
		Delete(ctx context.Context, in *CashierHanging, out *CashierHangingResponse) error
		Detail(ctx context.Context, in *CashierHanging, out *CashierHangingResponse) error
		Search(ctx context.Context, in *CashierHangingRequest, out *CashierHangingResponse) error
	}
	type CashierHangingService struct {
		cashierHangingService
	}
	h := &cashierHangingServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CashierHangingService{h}, opts...))
}

type cashierHangingServiceHandler struct {
	CashierHangingServiceHandler
}

func (h *cashierHangingServiceHandler) Save(ctx context.Context, in *CashierHanging, out *CashierHangingResponse) error {
	return h.CashierHangingServiceHandler.Save(ctx, in, out)
}

func (h *cashierHangingServiceHandler) Get(ctx context.Context, in *CashierHanging, out *CashierHangingResponse) error {
	return h.CashierHangingServiceHandler.Get(ctx, in, out)
}

func (h *cashierHangingServiceHandler) Count(ctx context.Context, in *CashierHanging, out *CashierHangingResponse) error {
	return h.CashierHangingServiceHandler.Count(ctx, in, out)
}

func (h *cashierHangingServiceHandler) Clear(ctx context.Context, in *CashierHanging, out *CashierHangingResponse) error {
	return h.CashierHangingServiceHandler.Clear(ctx, in, out)
}

func (h *cashierHangingServiceHandler) Delete(ctx context.Context, in *CashierHanging, out *CashierHangingResponse) error {
	return h.CashierHangingServiceHandler.Delete(ctx, in, out)
}

func (h *cashierHangingServiceHandler) Detail(ctx context.Context, in *CashierHanging, out *CashierHangingResponse) error {
	return h.CashierHangingServiceHandler.Detail(ctx, in, out)
}

func (h *cashierHangingServiceHandler) Search(ctx context.Context, in *CashierHangingRequest, out *CashierHangingResponse) error {
	return h.CashierHangingServiceHandler.Search(ctx, in, out)
}
