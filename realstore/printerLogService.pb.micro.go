// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: printerLogService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for PrinterLogService service

func NewPrinterLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for PrinterLogService service

type PrinterLogService interface {
	Create(ctx context.Context, in *PrinterLog, opts ...client.CallOption) (*PrinterLogResponse, error)
	Update(ctx context.Context, in *PrinterLog, opts ...client.CallOption) (*PrinterLogResponse, error)
	Delete(ctx context.Context, in *PrinterLog, opts ...client.CallOption) (*PrinterLogResponse, error)
	Get(ctx context.Context, in *PrinterLog, opts ...client.CallOption) (*PrinterLogResponse, error)
	List(ctx context.Context, in *PrinterLogRequest, opts ...client.CallOption) (*PrinterLogResponse, error)
	Search(ctx context.Context, in *PrinterLogRequest, opts ...client.CallOption) (*PrinterLogResponse, error)
}

type printerLogService struct {
	c    client.Client
	name string
}

func NewPrinterLogService(name string, c client.Client) PrinterLogService {
	return &printerLogService{
		c:    c,
		name: name,
	}
}

func (c *printerLogService) Create(ctx context.Context, in *PrinterLog, opts ...client.CallOption) (*PrinterLogResponse, error) {
	req := c.c.NewRequest(c.name, "PrinterLogService.Create", in)
	out := new(PrinterLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerLogService) Update(ctx context.Context, in *PrinterLog, opts ...client.CallOption) (*PrinterLogResponse, error) {
	req := c.c.NewRequest(c.name, "PrinterLogService.Update", in)
	out := new(PrinterLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerLogService) Delete(ctx context.Context, in *PrinterLog, opts ...client.CallOption) (*PrinterLogResponse, error) {
	req := c.c.NewRequest(c.name, "PrinterLogService.Delete", in)
	out := new(PrinterLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerLogService) Get(ctx context.Context, in *PrinterLog, opts ...client.CallOption) (*PrinterLogResponse, error) {
	req := c.c.NewRequest(c.name, "PrinterLogService.Get", in)
	out := new(PrinterLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerLogService) List(ctx context.Context, in *PrinterLogRequest, opts ...client.CallOption) (*PrinterLogResponse, error) {
	req := c.c.NewRequest(c.name, "PrinterLogService.List", in)
	out := new(PrinterLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *printerLogService) Search(ctx context.Context, in *PrinterLogRequest, opts ...client.CallOption) (*PrinterLogResponse, error) {
	req := c.c.NewRequest(c.name, "PrinterLogService.Search", in)
	out := new(PrinterLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PrinterLogService service

type PrinterLogServiceHandler interface {
	Create(context.Context, *PrinterLog, *PrinterLogResponse) error
	Update(context.Context, *PrinterLog, *PrinterLogResponse) error
	Delete(context.Context, *PrinterLog, *PrinterLogResponse) error
	Get(context.Context, *PrinterLog, *PrinterLogResponse) error
	List(context.Context, *PrinterLogRequest, *PrinterLogResponse) error
	Search(context.Context, *PrinterLogRequest, *PrinterLogResponse) error
}

func RegisterPrinterLogServiceHandler(s server.Server, hdlr PrinterLogServiceHandler, opts ...server.HandlerOption) error {
	type printerLogService interface {
		Create(ctx context.Context, in *PrinterLog, out *PrinterLogResponse) error
		Update(ctx context.Context, in *PrinterLog, out *PrinterLogResponse) error
		Delete(ctx context.Context, in *PrinterLog, out *PrinterLogResponse) error
		Get(ctx context.Context, in *PrinterLog, out *PrinterLogResponse) error
		List(ctx context.Context, in *PrinterLogRequest, out *PrinterLogResponse) error
		Search(ctx context.Context, in *PrinterLogRequest, out *PrinterLogResponse) error
	}
	type PrinterLogService struct {
		printerLogService
	}
	h := &printerLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&PrinterLogService{h}, opts...))
}

type printerLogServiceHandler struct {
	PrinterLogServiceHandler
}

func (h *printerLogServiceHandler) Create(ctx context.Context, in *PrinterLog, out *PrinterLogResponse) error {
	return h.PrinterLogServiceHandler.Create(ctx, in, out)
}

func (h *printerLogServiceHandler) Update(ctx context.Context, in *PrinterLog, out *PrinterLogResponse) error {
	return h.PrinterLogServiceHandler.Update(ctx, in, out)
}

func (h *printerLogServiceHandler) Delete(ctx context.Context, in *PrinterLog, out *PrinterLogResponse) error {
	return h.PrinterLogServiceHandler.Delete(ctx, in, out)
}

func (h *printerLogServiceHandler) Get(ctx context.Context, in *PrinterLog, out *PrinterLogResponse) error {
	return h.PrinterLogServiceHandler.Get(ctx, in, out)
}

func (h *printerLogServiceHandler) List(ctx context.Context, in *PrinterLogRequest, out *PrinterLogResponse) error {
	return h.PrinterLogServiceHandler.List(ctx, in, out)
}

func (h *printerLogServiceHandler) Search(ctx context.Context, in *PrinterLogRequest, out *PrinterLogResponse) error {
	return h.PrinterLogServiceHandler.Search(ctx, in, out)
}
