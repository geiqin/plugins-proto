// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: chargeOrderService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ChargeOrderService service

func NewChargeOrderServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ChargeOrderService service

type ChargeOrderService interface {
	Create(ctx context.Context, in *ChargeOrder, opts ...client.CallOption) (*ChargeOrderResponse, error)
	Update(ctx context.Context, in *ChargeOrder, opts ...client.CallOption) (*ChargeOrderResponse, error)
	Delete(ctx context.Context, in *ChargeOrder, opts ...client.CallOption) (*ChargeOrderResponse, error)
	Detail(ctx context.Context, in *ChargeOrder, opts ...client.CallOption) (*ChargeOrderResponse, error)
	Search(ctx context.Context, in *ChargeOrderRequest, opts ...client.CallOption) (*ChargeOrderResponse, error)
}

type chargeOrderService struct {
	c    client.Client
	name string
}

func NewChargeOrderService(name string, c client.Client) ChargeOrderService {
	return &chargeOrderService{
		c:    c,
		name: name,
	}
}

func (c *chargeOrderService) Create(ctx context.Context, in *ChargeOrder, opts ...client.CallOption) (*ChargeOrderResponse, error) {
	req := c.c.NewRequest(c.name, "ChargeOrderService.Create", in)
	out := new(ChargeOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargeOrderService) Update(ctx context.Context, in *ChargeOrder, opts ...client.CallOption) (*ChargeOrderResponse, error) {
	req := c.c.NewRequest(c.name, "ChargeOrderService.Update", in)
	out := new(ChargeOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargeOrderService) Delete(ctx context.Context, in *ChargeOrder, opts ...client.CallOption) (*ChargeOrderResponse, error) {
	req := c.c.NewRequest(c.name, "ChargeOrderService.Delete", in)
	out := new(ChargeOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargeOrderService) Detail(ctx context.Context, in *ChargeOrder, opts ...client.CallOption) (*ChargeOrderResponse, error) {
	req := c.c.NewRequest(c.name, "ChargeOrderService.Detail", in)
	out := new(ChargeOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chargeOrderService) Search(ctx context.Context, in *ChargeOrderRequest, opts ...client.CallOption) (*ChargeOrderResponse, error) {
	req := c.c.NewRequest(c.name, "ChargeOrderService.Search", in)
	out := new(ChargeOrderResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChargeOrderService service

type ChargeOrderServiceHandler interface {
	Create(context.Context, *ChargeOrder, *ChargeOrderResponse) error
	Update(context.Context, *ChargeOrder, *ChargeOrderResponse) error
	Delete(context.Context, *ChargeOrder, *ChargeOrderResponse) error
	Detail(context.Context, *ChargeOrder, *ChargeOrderResponse) error
	Search(context.Context, *ChargeOrderRequest, *ChargeOrderResponse) error
}

func RegisterChargeOrderServiceHandler(s server.Server, hdlr ChargeOrderServiceHandler, opts ...server.HandlerOption) error {
	type chargeOrderService interface {
		Create(ctx context.Context, in *ChargeOrder, out *ChargeOrderResponse) error
		Update(ctx context.Context, in *ChargeOrder, out *ChargeOrderResponse) error
		Delete(ctx context.Context, in *ChargeOrder, out *ChargeOrderResponse) error
		Detail(ctx context.Context, in *ChargeOrder, out *ChargeOrderResponse) error
		Search(ctx context.Context, in *ChargeOrderRequest, out *ChargeOrderResponse) error
	}
	type ChargeOrderService struct {
		chargeOrderService
	}
	h := &chargeOrderServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ChargeOrderService{h}, opts...))
}

type chargeOrderServiceHandler struct {
	ChargeOrderServiceHandler
}

func (h *chargeOrderServiceHandler) Create(ctx context.Context, in *ChargeOrder, out *ChargeOrderResponse) error {
	return h.ChargeOrderServiceHandler.Create(ctx, in, out)
}

func (h *chargeOrderServiceHandler) Update(ctx context.Context, in *ChargeOrder, out *ChargeOrderResponse) error {
	return h.ChargeOrderServiceHandler.Update(ctx, in, out)
}

func (h *chargeOrderServiceHandler) Delete(ctx context.Context, in *ChargeOrder, out *ChargeOrderResponse) error {
	return h.ChargeOrderServiceHandler.Delete(ctx, in, out)
}

func (h *chargeOrderServiceHandler) Detail(ctx context.Context, in *ChargeOrder, out *ChargeOrderResponse) error {
	return h.ChargeOrderServiceHandler.Detail(ctx, in, out)
}

func (h *chargeOrderServiceHandler) Search(ctx context.Context, in *ChargeOrderRequest, out *ChargeOrderResponse) error {
	return h.ChargeOrderServiceHandler.Search(ctx, in, out)
}
