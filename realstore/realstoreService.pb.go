// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: realstoreService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Realstore struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                    int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                                       //ID
	SystemType            string               `protobuf:"bytes,2,opt,name=system_type,json=systemType,proto3" json:"system_type"`                                      //系统类型（默认 default, 其他按照SYSTEM_TYPE常量类型）
	Name                  string               `protobuf:"bytes,3,opt,name=name,proto3" json:"name"`                                                                    //名称
	Alias                 string               `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias"`                                                                  //别名
	Describe              string               `protobuf:"bytes,5,opt,name=describe,proto3" json:"describe"`                                                            //简介
	LogoUrl               string               `protobuf:"bytes,6,opt,name=logo_url,json=logoUrl,proto3" json:"logo_url"`                                               //logo图片
	LogoLongUrl           string               `protobuf:"bytes,7,opt,name=logo_long_url,json=logoLongUrl,proto3" json:"logo_long_url"`                                 //长方形门店logo
	UserId                int64                `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id"`                                                 //用户id
	RegionManageId        int64                `protobuf:"varint,9,opt,name=region_manage_id,json=regionManageId,proto3" json:"region_manage_id"`                       //所属区管id
	CategoryId            int64                `protobuf:"varint,10,opt,name=category_id,json=categoryId,proto3" json:"category_id"`                                    //门店分类id
	ServiceTel            string               `protobuf:"bytes,11,opt,name=service_tel,json=serviceTel,proto3" json:"service_tel"`                                     //客服电话
	ServiceQq             string               `protobuf:"bytes,12,opt,name=service_qq,json=serviceQq,proto3" json:"service_qq"`                                        //客服QQ
	ServiceWeixinQrcode   string               `protobuf:"bytes,13,opt,name=service_weixin_qrcode,json=serviceWeixinQrcode,proto3" json:"service_weixin_qrcode"`        //客服微信二维码
	OpenWeek              string               `protobuf:"bytes,14,opt,name=open_week,json=openWeek,proto3" json:"open_week"`                                           //工作日起始
	CloseWeek             string               `protobuf:"bytes,15,opt,name=close_week,json=closeWeek,proto3" json:"close_week"`                                        //工作日结束
	OpenTime              string               `protobuf:"bytes,16,opt,name=open_time,json=openTime,proto3" json:"open_time"`                                           //在线时间起始
	CloseTime             string               `protobuf:"bytes,17,opt,name=close_time,json=closeTime,proto3" json:"close_time"`                                        //在线时间结束
	ContactName           string               `protobuf:"bytes,18,opt,name=contact_name,json=contactName,proto3" json:"contact_name"`                                  //联系人
	ContactTel            string               `protobuf:"bytes,19,opt,name=contact_tel,json=contactTel,proto3" json:"contact_tel"`                                     //联系电话
	ProvinceId            int64                `protobuf:"varint,20,opt,name=province_id,json=provinceId,proto3" json:"province_id"`                                    //所在省ID
	CityId                int64                `protobuf:"varint,21,opt,name=city_id,json=cityId,proto3" json:"city_id"`                                                //所在市ID
	CountyId              int64                `protobuf:"varint,22,opt,name=county_id,json=countyId,proto3" json:"county_id"`                                          //所在县/区ID
	Address               string               `protobuf:"bytes,23,opt,name=address,proto3" json:"address"`                                                             //详细地址
	Lng                   float32              `protobuf:"fixed32,24,opt,name=lng,proto3" json:"lng"`                                                                   //经度
	Lat                   float32              `protobuf:"fixed32,25,opt,name=lat,proto3" json:"lat"`                                                                   //纬度
	AuthType              string               `protobuf:"bytes,26,opt,name=auth_type,json=authType,proto3" json:"auth_type"`                                           //认证类型（0个人，1企业）
	FailReason            string               `protobuf:"bytes,27,opt,name=fail_reason,json=failReason,proto3" json:"fail_reason"`                                     //失败原因
	StartingPrice         int64                `protobuf:"varint,28,opt,name=starting_price,json=startingPrice,proto3" json:"starting_price"`                           //起步价
	ExpireTime            string               `protobuf:"bytes,29,opt,name=expire_time,json=expireTime,proto3" json:"expire_time"`                                     //门店到期时间（空则永久）
	UserBuyPayment        string               `protobuf:"bytes,30,opt,name=user_buy_payment,json=userBuyPayment,proto3" json:"user_buy_payment"`                       //用户可选支付方式（json存储）
	PositionDistanceLimit int64                `protobuf:"varint,31,opt,name=position_distance_limit,json=positionDistanceLimit,proto3" json:"position_distance_limit"` //地理位置距离限制（仅外送订单有效）(米)
	SeoTitle              string               `protobuf:"bytes,32,opt,name=seo_title,json=seoTitle,proto3" json:"seo_title"`                                           //SEO标题
	SeoKeywords           string               `protobuf:"bytes,33,opt,name=seo_keywords,json=seoKeywords,proto3" json:"seo_keywords"`                                  //SEO关键字
	SeoDesc               string               `protobuf:"bytes,34,opt,name=seo_desc,json=seoDesc,proto3" json:"seo_desc"`                                              //SEO描述
	IsAutoDelivery        string               `protobuf:"bytes,35,opt,name=is_auto_delivery,json=isAutoDelivery,proto3" json:"is_auto_delivery"`                       //是否自动发货及分配（0否，1是）
	IsAutoCollect         string               `protobuf:"bytes,36,opt,name=is_auto_collect,json=isAutoCollect,proto3" json:"is_auto_collect"`                          //是否自动收货（0否，1是）
	Status                string               `protobuf:"bytes,37,opt,name=status,proto3" json:"status"`                                                               //状态（0待提交，1待审核，2已审核，3已拒绝，4已关闭）
	CreatedAt             string               `protobuf:"bytes,38,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt             string               `protobuf:"bytes,39,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	StatusName            string               `protobuf:"bytes,40,opt,name=status_name,json=statusName,proto3" json:"status_name"`
	AuthTypeName          string               `protobuf:"bytes,41,opt,name=auth_type_name,json=authTypeName,proto3" json:"auth_type_name"`
	ProvinceName          string               `protobuf:"bytes,42,opt,name=province_name,json=provinceName,proto3" json:"province_name"`
	CityName              string               `protobuf:"bytes,43,opt,name=city_name,json=cityName,proto3" json:"city_name"`
	CountyName            string               `protobuf:"bytes,44,opt,name=county_name,json=countyName,proto3" json:"county_name"`
	RegionManage          *RegionManage        `protobuf:"bytes,45,opt,name=region_manage,json=regionManage,proto3" json:"region_manage"`
	Category              *Category            `protobuf:"bytes,46,opt,name=category,proto3" json:"category"`
	Secret                *RealstoreSecret     `protobuf:"bytes,47,opt,name=secret,proto3" json:"secret"`
	StatusInfo            *RealstoreStatusInfo `protobuf:"bytes,48,opt,name=status_info,json=statusInfo,proto3" json:"status_info"` //用客户端展示
}

func (x *Realstore) Reset() {
	*x = Realstore{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realstoreService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Realstore) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Realstore) ProtoMessage() {}

func (x *Realstore) ProtoReflect() protoreflect.Message {
	mi := &file_realstoreService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Realstore.ProtoReflect.Descriptor instead.
func (*Realstore) Descriptor() ([]byte, []int) {
	return file_realstoreService_proto_rawDescGZIP(), []int{0}
}

func (x *Realstore) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Realstore) GetSystemType() string {
	if x != nil {
		return x.SystemType
	}
	return ""
}

func (x *Realstore) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Realstore) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Realstore) GetDescribe() string {
	if x != nil {
		return x.Describe
	}
	return ""
}

func (x *Realstore) GetLogoUrl() string {
	if x != nil {
		return x.LogoUrl
	}
	return ""
}

func (x *Realstore) GetLogoLongUrl() string {
	if x != nil {
		return x.LogoLongUrl
	}
	return ""
}

func (x *Realstore) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *Realstore) GetRegionManageId() int64 {
	if x != nil {
		return x.RegionManageId
	}
	return 0
}

func (x *Realstore) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *Realstore) GetServiceTel() string {
	if x != nil {
		return x.ServiceTel
	}
	return ""
}

func (x *Realstore) GetServiceQq() string {
	if x != nil {
		return x.ServiceQq
	}
	return ""
}

func (x *Realstore) GetServiceWeixinQrcode() string {
	if x != nil {
		return x.ServiceWeixinQrcode
	}
	return ""
}

func (x *Realstore) GetOpenWeek() string {
	if x != nil {
		return x.OpenWeek
	}
	return ""
}

func (x *Realstore) GetCloseWeek() string {
	if x != nil {
		return x.CloseWeek
	}
	return ""
}

func (x *Realstore) GetOpenTime() string {
	if x != nil {
		return x.OpenTime
	}
	return ""
}

func (x *Realstore) GetCloseTime() string {
	if x != nil {
		return x.CloseTime
	}
	return ""
}

func (x *Realstore) GetContactName() string {
	if x != nil {
		return x.ContactName
	}
	return ""
}

func (x *Realstore) GetContactTel() string {
	if x != nil {
		return x.ContactTel
	}
	return ""
}

func (x *Realstore) GetProvinceId() int64 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *Realstore) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *Realstore) GetCountyId() int64 {
	if x != nil {
		return x.CountyId
	}
	return 0
}

func (x *Realstore) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Realstore) GetLng() float32 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *Realstore) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *Realstore) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *Realstore) GetFailReason() string {
	if x != nil {
		return x.FailReason
	}
	return ""
}

func (x *Realstore) GetStartingPrice() int64 {
	if x != nil {
		return x.StartingPrice
	}
	return 0
}

func (x *Realstore) GetExpireTime() string {
	if x != nil {
		return x.ExpireTime
	}
	return ""
}

func (x *Realstore) GetUserBuyPayment() string {
	if x != nil {
		return x.UserBuyPayment
	}
	return ""
}

func (x *Realstore) GetPositionDistanceLimit() int64 {
	if x != nil {
		return x.PositionDistanceLimit
	}
	return 0
}

func (x *Realstore) GetSeoTitle() string {
	if x != nil {
		return x.SeoTitle
	}
	return ""
}

func (x *Realstore) GetSeoKeywords() string {
	if x != nil {
		return x.SeoKeywords
	}
	return ""
}

func (x *Realstore) GetSeoDesc() string {
	if x != nil {
		return x.SeoDesc
	}
	return ""
}

func (x *Realstore) GetIsAutoDelivery() string {
	if x != nil {
		return x.IsAutoDelivery
	}
	return ""
}

func (x *Realstore) GetIsAutoCollect() string {
	if x != nil {
		return x.IsAutoCollect
	}
	return ""
}

func (x *Realstore) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Realstore) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *Realstore) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *Realstore) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

func (x *Realstore) GetAuthTypeName() string {
	if x != nil {
		return x.AuthTypeName
	}
	return ""
}

func (x *Realstore) GetProvinceName() string {
	if x != nil {
		return x.ProvinceName
	}
	return ""
}

func (x *Realstore) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *Realstore) GetCountyName() string {
	if x != nil {
		return x.CountyName
	}
	return ""
}

func (x *Realstore) GetRegionManage() *RegionManage {
	if x != nil {
		return x.RegionManage
	}
	return nil
}

func (x *Realstore) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

func (x *Realstore) GetSecret() *RealstoreSecret {
	if x != nil {
		return x.Secret
	}
	return nil
}

func (x *Realstore) GetStatusInfo() *RealstoreStatusInfo {
	if x != nil {
		return x.StatusInfo
	}
	return nil
}

// 店铺状态信息
type RealstoreStatusInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   string `protobuf:"bytes,1,opt,name=type,proto3" json:"type"`
	Status string `protobuf:"bytes,2,opt,name=status,proto3" json:"status"`
	Msg    string `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg"`
	Time   string `protobuf:"bytes,4,opt,name=time,proto3" json:"time"`
}

func (x *RealstoreStatusInfo) Reset() {
	*x = RealstoreStatusInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realstoreService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealstoreStatusInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealstoreStatusInfo) ProtoMessage() {}

func (x *RealstoreStatusInfo) ProtoReflect() protoreflect.Message {
	mi := &file_realstoreService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealstoreStatusInfo.ProtoReflect.Descriptor instead.
func (*RealstoreStatusInfo) Descriptor() ([]byte, []int) {
	return file_realstoreService_proto_rawDescGZIP(), []int{1}
}

func (x *RealstoreStatusInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RealstoreStatusInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RealstoreStatusInfo) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *RealstoreStatusInfo) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

type RealstoreSecret struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64   `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                              //ID
	RealstoreId    int64   `protobuf:"varint,2,opt,name=realstore_id,json=realstoreId,proto3" json:"realstore_id"`         //门店id
	NoticeMobile   string  `protobuf:"bytes,3,opt,name=notice_mobile,json=noticeMobile,proto3" json:"notice_mobile"`       //接收通知手机号码
	NoticeEmail    string  `protobuf:"bytes,4,opt,name=notice_email,json=noticeEmail,proto3" json:"notice_email"`          //接收通知电子邮箱
	CompanyName    string  `protobuf:"bytes,5,opt,name=company_name,json=companyName,proto3" json:"company_name"`          //企业名称
	CompanyNumber  string  `protobuf:"bytes,6,opt,name=company_number,json=companyNumber,proto3" json:"company_number"`    //企业统一社会信用代码
	CompanyLicense string  `protobuf:"bytes,7,opt,name=company_license,json=companyLicense,proto3" json:"company_license"` //企业执照图片
	MoreProve      string  `protobuf:"bytes,8,opt,name=more_prove,json=moreProve,proto3" json:"more_prove"`                //更多材料附件、json存储
	IdcardName     string  `protobuf:"bytes,9,opt,name=idcard_name,json=idcardName,proto3" json:"idcard_name"`             //身份证姓名
	IdcardNumber   string  `protobuf:"bytes,10,opt,name=idcard_number,json=idcardNumber,proto3" json:"idcard_number"`      //身份证号码
	IdcardFront    string  `protobuf:"bytes,11,opt,name=idcard_front,json=idcardFront,proto3" json:"idcard_front"`         //身份证人像面图片
	IdcardBack     string  `protobuf:"bytes,12,opt,name=idcard_back,json=idcardBack,proto3" json:"idcard_back"`            //身份证国微面图片
	SettleRate     float32 `protobuf:"fixed32,13,opt,name=settle_rate,json=settleRate,proto3" json:"settle_rate"`          //结算比例0~100的值
	FailReason     string  `protobuf:"bytes,14,opt,name=fail_reason,json=failReason,proto3" json:"fail_reason"`            //失败原因
	PrinterCfg     string  `protobuf:"bytes,15,opt,name=printer_cfg,json=printerCfg,proto3" json:"printer_cfg"`            //打印机配置、json存储
	CreatedAt      string  `protobuf:"bytes,16,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt      string  `protobuf:"bytes,17,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *RealstoreSecret) Reset() {
	*x = RealstoreSecret{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realstoreService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealstoreSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealstoreSecret) ProtoMessage() {}

func (x *RealstoreSecret) ProtoReflect() protoreflect.Message {
	mi := &file_realstoreService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealstoreSecret.ProtoReflect.Descriptor instead.
func (*RealstoreSecret) Descriptor() ([]byte, []int) {
	return file_realstoreService_proto_rawDescGZIP(), []int{2}
}

func (x *RealstoreSecret) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RealstoreSecret) GetRealstoreId() int64 {
	if x != nil {
		return x.RealstoreId
	}
	return 0
}

func (x *RealstoreSecret) GetNoticeMobile() string {
	if x != nil {
		return x.NoticeMobile
	}
	return ""
}

func (x *RealstoreSecret) GetNoticeEmail() string {
	if x != nil {
		return x.NoticeEmail
	}
	return ""
}

func (x *RealstoreSecret) GetCompanyName() string {
	if x != nil {
		return x.CompanyName
	}
	return ""
}

func (x *RealstoreSecret) GetCompanyNumber() string {
	if x != nil {
		return x.CompanyNumber
	}
	return ""
}

func (x *RealstoreSecret) GetCompanyLicense() string {
	if x != nil {
		return x.CompanyLicense
	}
	return ""
}

func (x *RealstoreSecret) GetMoreProve() string {
	if x != nil {
		return x.MoreProve
	}
	return ""
}

func (x *RealstoreSecret) GetIdcardName() string {
	if x != nil {
		return x.IdcardName
	}
	return ""
}

func (x *RealstoreSecret) GetIdcardNumber() string {
	if x != nil {
		return x.IdcardNumber
	}
	return ""
}

func (x *RealstoreSecret) GetIdcardFront() string {
	if x != nil {
		return x.IdcardFront
	}
	return ""
}

func (x *RealstoreSecret) GetIdcardBack() string {
	if x != nil {
		return x.IdcardBack
	}
	return ""
}

func (x *RealstoreSecret) GetSettleRate() float32 {
	if x != nil {
		return x.SettleRate
	}
	return 0
}

func (x *RealstoreSecret) GetFailReason() string {
	if x != nil {
		return x.FailReason
	}
	return ""
}

func (x *RealstoreSecret) GetPrinterCfg() string {
	if x != nil {
		return x.PrinterCfg
	}
	return ""
}

func (x *RealstoreSecret) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *RealstoreSecret) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type RealstoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged          int64   `protobuf:"varint,1,opt,name=paged,proto3" json:"paged"`
	PageSize       int64   `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords       string  `protobuf:"bytes,3,opt,name=keywords,proto3" json:"keywords"`
	Id             int32   `protobuf:"varint,4,opt,name=id,proto3" json:"id"`
	Name           string  `protobuf:"bytes,5,opt,name=name,proto3" json:"name"`
	Type           string  `protobuf:"bytes,6,opt,name=type,proto3" json:"type"`
	AuthType       string  `protobuf:"bytes,7,opt,name=auth_type,json=authType,proto3" json:"auth_type"`
	CreatorId      string  `protobuf:"bytes,8,opt,name=creator_id,json=creatorId,proto3" json:"creator_id"`
	Status         string  `protobuf:"bytes,9,opt,name=status,proto3" json:"status"`
	RegionManageId int64   `protobuf:"varint,10,opt,name=region_manage_id,json=regionManageId,proto3" json:"region_manage_id"` //所属区管id
	CategoryId     int64   `protobuf:"varint,11,opt,name=category_id,json=categoryId,proto3" json:"category_id"`               //门店分类id
	UserId         int64   `protobuf:"varint,12,opt,name=user_id,json=userId,proto3" json:"user_id"`                           //用户id
	ProvinceId     int64   `protobuf:"varint,13,opt,name=province_id,json=provinceId,proto3" json:"province_id"`               //所在省ID
	CityId         int64   `protobuf:"varint,14,opt,name=city_id,json=cityId,proto3" json:"city_id"`                           //所在市ID
	CountyId       int64   `protobuf:"varint,15,opt,name=county_id,json=countyId,proto3" json:"county_id"`                     //所在县/区ID
	Lng            float32 `protobuf:"fixed32,16,opt,name=lng,proto3" json:"lng"`                                              //经度
	Lat            float32 `protobuf:"fixed32,17,opt,name=lat,proto3" json:"lat"`                                              //纬度
	Ids            []int64 `protobuf:"varint,18,rep,packed,name=ids,proto3" json:"ids"`
}

func (x *RealstoreRequest) Reset() {
	*x = RealstoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realstoreService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealstoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealstoreRequest) ProtoMessage() {}

func (x *RealstoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_realstoreService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealstoreRequest.ProtoReflect.Descriptor instead.
func (*RealstoreRequest) Descriptor() ([]byte, []int) {
	return file_realstoreService_proto_rawDescGZIP(), []int{3}
}

func (x *RealstoreRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *RealstoreRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *RealstoreRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *RealstoreRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RealstoreRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RealstoreRequest) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RealstoreRequest) GetAuthType() string {
	if x != nil {
		return x.AuthType
	}
	return ""
}

func (x *RealstoreRequest) GetCreatorId() string {
	if x != nil {
		return x.CreatorId
	}
	return ""
}

func (x *RealstoreRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *RealstoreRequest) GetRegionManageId() int64 {
	if x != nil {
		return x.RegionManageId
	}
	return 0
}

func (x *RealstoreRequest) GetCategoryId() int64 {
	if x != nil {
		return x.CategoryId
	}
	return 0
}

func (x *RealstoreRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RealstoreRequest) GetProvinceId() int64 {
	if x != nil {
		return x.ProvinceId
	}
	return 0
}

func (x *RealstoreRequest) GetCityId() int64 {
	if x != nil {
		return x.CityId
	}
	return 0
}

func (x *RealstoreRequest) GetCountyId() int64 {
	if x != nil {
		return x.CountyId
	}
	return 0
}

func (x *RealstoreRequest) GetLng() float32 {
	if x != nil {
		return x.Lng
	}
	return 0
}

func (x *RealstoreRequest) GetLat() float32 {
	if x != nil {
		return x.Lat
	}
	return 0
}

func (x *RealstoreRequest) GetIds() []int64 {
	if x != nil {
		return x.Ids
	}
	return nil
}

type RealstoreResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *Realstore    `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager  *common.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Items  []*Realstore  `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
	Info   string        `protobuf:"bytes,4,opt,name=info,proto3" json:"info"`
}

func (x *RealstoreResponse) Reset() {
	*x = RealstoreResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_realstoreService_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RealstoreResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RealstoreResponse) ProtoMessage() {}

func (x *RealstoreResponse) ProtoReflect() protoreflect.Message {
	mi := &file_realstoreService_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RealstoreResponse.ProtoReflect.Descriptor instead.
func (*RealstoreResponse) Descriptor() ([]byte, []int) {
	return file_realstoreService_proto_rawDescGZIP(), []int{4}
}

func (x *RealstoreResponse) GetEntity() *Realstore {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *RealstoreResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *RealstoreResponse) GetItems() []*Realstore {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *RealstoreResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

var File_realstoreService_proto protoreflect.FileDescriptor

var file_realstoreService_proto_rawDesc = []byte{
	0x0a, 0x16, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x72, 0x65,
	0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x0c, 0x0a, 0x09, 0x52, 0x65, 0x61, 0x6c,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c,
	0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x19, 0x0a, 0x08,
	0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6c, 0x6f, 0x67, 0x6f, 0x55, 0x72, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x6f, 0x5f,
	0x6c, 0x6f, 0x6e, 0x67, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x6c, 0x6f, 0x67, 0x6f, 0x4c, 0x6f, 0x6e, 0x67, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x65, 0x6c, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x65, 0x6c,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x71, 0x71, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x51, 0x71, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x77, 0x65, 0x69, 0x78, 0x69,
	0x6e, 0x5f, 0x71, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x13,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x57, 0x65, 0x69, 0x78, 0x69, 0x6e, 0x51, 0x72, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77, 0x65, 0x65, 0x6b,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x57, 0x65, 0x65, 0x6b,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x77, 0x65, 0x65, 0x6b, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x57, 0x65, 0x65, 0x6b, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x65, 0x6c, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x54, 0x65, 0x6c, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c,
	0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x61, 0x74, 0x18, 0x19, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x6c, 0x61, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x42, 0x75, 0x79, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09,
	0x73, 0x65, 0x6f, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x65, 0x6f, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x6f,
	0x5f, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x6f, 0x4b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73, 0x12, 0x19, 0x0a, 0x08,
	0x73, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x22, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x73, 0x65, 0x6f, 0x44, 0x65, 0x73, 0x63, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x61, 0x75,
	0x74, 0x6f, 0x5f, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x69, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72,
	0x79, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x73, 0x5f, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x63, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x73, 0x41, 0x75,
	0x74, 0x6f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x27,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x24, 0x0a, 0x0e, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x75, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e,
	0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70,
	0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63,
	0x69, 0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x63, 0x69, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0d, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x67, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x31, 0x0a, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x52, 0x06, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x67, 0x0a, 0x13, 0x52, 0x65, 0x61,
	0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x10, 0x0a, 0x03,
	0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x22, 0xc9, 0x04, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65,
	0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x6e, 0x6f, 0x74,
	0x69, 0x63, 0x65, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x5f, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x6f, 0x74, 0x69, 0x63, 0x65, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f,
	0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63,
	0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x5f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x4c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x6f, 0x72, 0x65, 0x5f, 0x70, 0x72, 0x6f,
	0x76, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x6f, 0x72, 0x65, 0x50, 0x72,
	0x6f, 0x76, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x64, 0x63,
	0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x64, 0x63,
	0x61, 0x72, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x69, 0x64, 0x63, 0x61, 0x72, 0x64, 0x42, 0x61, 0x63, 0x6b, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f,
	0x0a, 0x0b, 0x66, 0x61, 0x69, 0x6c, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x63, 0x66, 0x67, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x43, 0x66, 0x67,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xde,
	0x03, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67,
	0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x75,
	0x74, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28,
	0x0a, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63,
	0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x69, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x63, 0x69, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x79, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6e, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6c,
	0x61, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x61, 0x74, 0x12, 0x10, 0x0a,
	0x03, 0x69, 0x64, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x03, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0xa4, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x06, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x72,
	0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x05, 0x69, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x32, 0x86, 0x03, 0x0a, 0x10, 0x52, 0x65, 0x61, 0x6c, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x2e, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61,
	0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x13, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3a, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x1a, 0x1b,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x04, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42,
	0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_realstoreService_proto_rawDescOnce sync.Once
	file_realstoreService_proto_rawDescData = file_realstoreService_proto_rawDesc
)

func file_realstoreService_proto_rawDescGZIP() []byte {
	file_realstoreService_proto_rawDescOnce.Do(func() {
		file_realstoreService_proto_rawDescData = protoimpl.X.CompressGZIP(file_realstoreService_proto_rawDescData)
	})
	return file_realstoreService_proto_rawDescData
}

var file_realstoreService_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_realstoreService_proto_goTypes = []interface{}{
	(*Realstore)(nil),           // 0: services.Realstore
	(*RealstoreStatusInfo)(nil), // 1: services.RealstoreStatusInfo
	(*RealstoreSecret)(nil),     // 2: services.RealstoreSecret
	(*RealstoreRequest)(nil),    // 3: services.RealstoreRequest
	(*RealstoreResponse)(nil),   // 4: services.RealstoreResponse
	(*RegionManage)(nil),        // 5: services.RegionManage
	(*Category)(nil),            // 6: services.Category
	(*common.Pager)(nil),        // 7: common.Pager
}
var file_realstoreService_proto_depIdxs = []int32{
	5,  // 0: services.Realstore.region_manage:type_name -> services.RegionManage
	6,  // 1: services.Realstore.category:type_name -> services.Category
	2,  // 2: services.Realstore.secret:type_name -> services.RealstoreSecret
	1,  // 3: services.Realstore.status_info:type_name -> services.RealstoreStatusInfo
	0,  // 4: services.RealstoreResponse.entity:type_name -> services.Realstore
	7,  // 5: services.RealstoreResponse.pager:type_name -> common.Pager
	0,  // 6: services.RealstoreResponse.items:type_name -> services.Realstore
	0,  // 7: services.RealstoreService.Create:input_type -> services.Realstore
	0,  // 8: services.RealstoreService.Update:input_type -> services.Realstore
	0,  // 9: services.RealstoreService.Delete:input_type -> services.Realstore
	0,  // 10: services.RealstoreService.Detail:input_type -> services.Realstore
	3,  // 11: services.RealstoreService.List:input_type -> services.RealstoreRequest
	3,  // 12: services.RealstoreService.Search:input_type -> services.RealstoreRequest
	4,  // 13: services.RealstoreService.Create:output_type -> services.RealstoreResponse
	4,  // 14: services.RealstoreService.Update:output_type -> services.RealstoreResponse
	4,  // 15: services.RealstoreService.Delete:output_type -> services.RealstoreResponse
	4,  // 16: services.RealstoreService.Detail:output_type -> services.RealstoreResponse
	4,  // 17: services.RealstoreService.List:output_type -> services.RealstoreResponse
	4,  // 18: services.RealstoreService.Search:output_type -> services.RealstoreResponse
	13, // [13:19] is the sub-list for method output_type
	7,  // [7:13] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_realstoreService_proto_init() }
func file_realstoreService_proto_init() {
	if File_realstoreService_proto != nil {
		return
	}
	file_categoryService_proto_init()
	file_regionManageService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_realstoreService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Realstore); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realstoreService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealstoreStatusInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realstoreService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealstoreSecret); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realstoreService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealstoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_realstoreService_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RealstoreResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_realstoreService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_realstoreService_proto_goTypes,
		DependencyIndexes: file_realstoreService_proto_depIdxs,
		MessageInfos:      file_realstoreService_proto_msgTypes,
	}.Build()
	File_realstoreService_proto = out.File
	file_realstoreService_proto_rawDesc = nil
	file_realstoreService_proto_goTypes = nil
	file_realstoreService_proto_depIdxs = nil
}
