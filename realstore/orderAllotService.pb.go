// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.19.4
// source: orderAllotService.proto

package services

import (
	common "github.com/geiqin/micro-kit/protobuf/common"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OrderAllot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                int64               `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                                         //ID
	OrderAllotNo      string              `protobuf:"bytes,2,opt,name=order_allot_no,json=orderAllotNo,proto3" json:"order_allot_no"`                //订单分配单号
	RealstoreId       int64               `protobuf:"varint,3,opt,name=realstore_id,json=realstoreId,proto3" json:"realstore_id"`                    //门店id
	UserId            int64               `protobuf:"varint,4,opt,name=user_id,json=userId,proto3" json:"user_id"`                                   //用户id
	OrderId           int64               `protobuf:"varint,5,opt,name=order_id,json=orderId,proto3" json:"order_id"`                                //订单id
	OrderMemberId     int64               `protobuf:"varint,6,opt,name=order_member_id,json=orderMemberId,proto3" json:"order_member_id"`            //订单用户id
	CreatedType       string              `protobuf:"bytes,7,opt,name=created_type,json=createdType,proto3" json:"created_type"`                     //订单来源（0系统指派, 1门店收银, 2用户扫码）
	OrderType         string              `protobuf:"bytes,8,opt,name=order_type,json=orderType,proto3" json:"order_type"`                           //订单模式（0快递配送, 1客户自提, 2上门服务, 3虚拟产品）
	BuyCount          float32             `protobuf:"fixed32,9,opt,name=buy_count,json=buyCount,proto3" json:"buy_count"`                            //购买商品总数量(总件数+总称重（千克）)
	BuyNumberCount    int64               `protobuf:"varint,10,opt,name=buy_number_count,json=buyNumberCount,proto3" json:"buy_number_count"`        //购买商品总件数（非称重商品）
	BuyWeightCount    int64               `protobuf:"varint,11,opt,name=buy_weight_count,json=buyWeightCount,proto3" json:"buy_weight_count"`        //购买商品总秤重（称重商品.克）
	TotalPrice        int64               `protobuf:"varint,12,opt,name=total_price,json=totalPrice,proto3" json:"total_price"`                      //订单单价
	ActualPrice       int64               `protobuf:"varint,13,opt,name=actual_price,json=actualPrice,proto3" json:"actual_price"`                   //订单总价(订单最终价格)
	IncreasePrice     int64               `protobuf:"varint,14,opt,name=increase_price,json=increasePrice,proto3" json:"increase_price"`             //增加的金额
	PreferentialPrice int64               `protobuf:"varint,15,opt,name=preferential_price,json=preferentialPrice,proto3" json:"preferential_price"` //优惠金额
	SpecialRemarks    string              `protobuf:"bytes,16,opt,name=special_remarks,json=specialRemarks,proto3" json:"special_remarks"`           //特别说明（管理员填写）
	TransferReason    string              `protobuf:"bytes,17,opt,name=transfer_reason,json=transferReason,proto3" json:"transfer_reason"`           //转单原因（门店申请转单填写）
	ServiceMsg        string              `protobuf:"bytes,18,opt,name=service_msg,json=serviceMsg,proto3" json:"service_msg"`                       //服务描述（门店填写）
	ReceiveTime       string              `protobuf:"bytes,19,opt,name=receive_time,json=receiveTime,proto3" json:"receive_time"`                    //接收时间
	ServiceTime       string              `protobuf:"bytes,20,opt,name=service_time,json=serviceTime,proto3" json:"service_time"`                    //服务时间
	SuccessTime       string              `protobuf:"bytes,21,opt,name=success_time,json=successTime,proto3" json:"success_time"`                    //完成时间
	TransferTime      string              `protobuf:"bytes,22,opt,name=transfer_time,json=transferTime,proto3" json:"transfer_time"`                 //转单时间
	CancelTime        string              `protobuf:"bytes,23,opt,name=cancel_time,json=cancelTime,proto3" json:"cancel_time"`                       //取消时间
	CreatorId         int64               `protobuf:"varint,24,opt,name=creator_id,json=creatorId,proto3" json:"creator_id"`                         //创建-用户id
	CreatorName       string              `protobuf:"bytes,25,opt,name=creator_name,json=creatorName,proto3" json:"creator_name"`                    //创建人-名称
	Status            string              `protobuf:"bytes,26,opt,name=status,proto3" json:"status"`                                                 //订单状态（0待接收、1已接收、2服务中、3待签收、4已完成、5转单中、6已取消、7已关闭）
	CreatedAt         string              `protobuf:"bytes,27,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt         string              `protobuf:"bytes,28,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	Realstore         *Realstore          `protobuf:"bytes,29,opt,name=realstore,proto3" json:"realstore"`
	Details           []*OrderAllotDetail `protobuf:"bytes,30,rep,name=details,proto3" json:"details"`
	CreatedTypeName   string              `protobuf:"bytes,31,opt,name=created_type_name,json=createdTypeName,proto3" json:"created_type_name"`
	OrderTypeName     string              `protobuf:"bytes,32,opt,name=order_type_name,json=orderTypeName,proto3" json:"order_type_name"`
	StatusName        string              `protobuf:"bytes,33,opt,name=status_name,json=statusName,proto3" json:"status_name"`
}

func (x *OrderAllot) Reset() {
	*x = OrderAllot{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orderAllotService_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderAllot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderAllot) ProtoMessage() {}

func (x *OrderAllot) ProtoReflect() protoreflect.Message {
	mi := &file_orderAllotService_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderAllot.ProtoReflect.Descriptor instead.
func (*OrderAllot) Descriptor() ([]byte, []int) {
	return file_orderAllotService_proto_rawDescGZIP(), []int{0}
}

func (x *OrderAllot) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderAllot) GetOrderAllotNo() string {
	if x != nil {
		return x.OrderAllotNo
	}
	return ""
}

func (x *OrderAllot) GetRealstoreId() int64 {
	if x != nil {
		return x.RealstoreId
	}
	return 0
}

func (x *OrderAllot) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OrderAllot) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *OrderAllot) GetOrderMemberId() int64 {
	if x != nil {
		return x.OrderMemberId
	}
	return 0
}

func (x *OrderAllot) GetCreatedType() string {
	if x != nil {
		return x.CreatedType
	}
	return ""
}

func (x *OrderAllot) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

func (x *OrderAllot) GetBuyCount() float32 {
	if x != nil {
		return x.BuyCount
	}
	return 0
}

func (x *OrderAllot) GetBuyNumberCount() int64 {
	if x != nil {
		return x.BuyNumberCount
	}
	return 0
}

func (x *OrderAllot) GetBuyWeightCount() int64 {
	if x != nil {
		return x.BuyWeightCount
	}
	return 0
}

func (x *OrderAllot) GetTotalPrice() int64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *OrderAllot) GetActualPrice() int64 {
	if x != nil {
		return x.ActualPrice
	}
	return 0
}

func (x *OrderAllot) GetIncreasePrice() int64 {
	if x != nil {
		return x.IncreasePrice
	}
	return 0
}

func (x *OrderAllot) GetPreferentialPrice() int64 {
	if x != nil {
		return x.PreferentialPrice
	}
	return 0
}

func (x *OrderAllot) GetSpecialRemarks() string {
	if x != nil {
		return x.SpecialRemarks
	}
	return ""
}

func (x *OrderAllot) GetTransferReason() string {
	if x != nil {
		return x.TransferReason
	}
	return ""
}

func (x *OrderAllot) GetServiceMsg() string {
	if x != nil {
		return x.ServiceMsg
	}
	return ""
}

func (x *OrderAllot) GetReceiveTime() string {
	if x != nil {
		return x.ReceiveTime
	}
	return ""
}

func (x *OrderAllot) GetServiceTime() string {
	if x != nil {
		return x.ServiceTime
	}
	return ""
}

func (x *OrderAllot) GetSuccessTime() string {
	if x != nil {
		return x.SuccessTime
	}
	return ""
}

func (x *OrderAllot) GetTransferTime() string {
	if x != nil {
		return x.TransferTime
	}
	return ""
}

func (x *OrderAllot) GetCancelTime() string {
	if x != nil {
		return x.CancelTime
	}
	return ""
}

func (x *OrderAllot) GetCreatorId() int64 {
	if x != nil {
		return x.CreatorId
	}
	return 0
}

func (x *OrderAllot) GetCreatorName() string {
	if x != nil {
		return x.CreatorName
	}
	return ""
}

func (x *OrderAllot) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrderAllot) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OrderAllot) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

func (x *OrderAllot) GetRealstore() *Realstore {
	if x != nil {
		return x.Realstore
	}
	return nil
}

func (x *OrderAllot) GetDetails() []*OrderAllotDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *OrderAllot) GetCreatedTypeName() string {
	if x != nil {
		return x.CreatedTypeName
	}
	return ""
}

func (x *OrderAllot) GetOrderTypeName() string {
	if x != nil {
		return x.OrderTypeName
	}
	return ""
}

func (x *OrderAllot) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

type OrderAllotDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id"`                                              //ID
	OrderAllotId  int64                `protobuf:"varint,2,opt,name=order_allot_id,json=orderAllotId,proto3" json:"order_allot_id"`    //订单分配id
	RealstoreId   int64                `protobuf:"varint,3,opt,name=realstore_id,json=realstoreId,proto3" json:"realstore_id"`         //门店id
	OrderId       int64                `protobuf:"varint,4,opt,name=order_id,json=orderId,proto3" json:"order_id"`                     //订单id
	OrderDetailId int64                `protobuf:"varint,5,opt,name=order_detail_id,json=orderDetailId,proto3" json:"order_detail_id"` //原始订单详情id
	SpuId         int64                `protobuf:"varint,6,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`                           //商品id
	Title         string               `protobuf:"bytes,7,opt,name=title,proto3" json:"title"`                                         //标题
	ImageUrl      string               `protobuf:"bytes,8,opt,name=image_url,json=imageUrl,proto3" json:"image_url"`                   //图片路径
	Md5Key        string               `protobuf:"bytes,9,opt,name=md5_key,json=md5Key,proto3" json:"md5_key"`                         //md5key
	Unit          string               `protobuf:"bytes,11,opt,name=unit,proto3" json:"unit"`                                          //型号
	UnitRate      float32              `protobuf:"fixed32,12,opt,name=unit_rate,json=unitRate,proto3" json:"unit_rate"`                //计量单位换算率
	IsOpenWeight  string               `protobuf:"bytes,13,opt,name=is_open_weight,json=isOpenWeight,proto3" json:"is_open_weight"`    //是否开启称重（称重商品不能是多规格）（0否, 1是）
	BuyNumber     int64                `protobuf:"varint,14,opt,name=buy_number,json=buyNumber,proto3" json:"buy_number"`              //购买数量
	SalePrice     int64                `protobuf:"varint,15,opt,name=sale_price,json=salePrice,proto3" json:"sale_price"`              //销售价
	Price         int64                `protobuf:"varint,16,opt,name=price,proto3" json:"price"`                                       //成交价
	SubtotalPrice int64                `protobuf:"varint,17,opt,name=subtotal_price,json=subtotalPrice,proto3" json:"subtotal_price"`  //当前总价(单价*数量)
	Model         string               `protobuf:"bytes,18,opt,name=model,proto3" json:"model"`                                        //型号
	SpecWeight    int64                `protobuf:"varint,19,opt,name=spec_weight,json=specWeight,proto3" json:"spec_weight"`           //规格重量（g）
	SpecVolume    int64                `protobuf:"varint,20,opt,name=spec_volume,json=specVolume,proto3" json:"spec_volume"`           //规格体积
	SpecCoding    string               `protobuf:"bytes,21,opt,name=spec_coding,json=specCoding,proto3" json:"spec_coding"`            //编码
	SpecBarcode   string               `protobuf:"bytes,22,opt,name=spec_barcode,json=specBarcode,proto3" json:"spec_barcode"`         //条形码
	SpecDesc      string               `protobuf:"bytes,23,opt,name=spec_desc,json=specDesc,proto3" json:"spec_desc"`                  //规格描述
	Spec          []*SpecificationData `protobuf:"bytes,24,rep,name=spec,proto3" json:"spec"`                                          //规格信息
	CreatedAt     string               `protobuf:"bytes,25,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt     string               `protobuf:"bytes,26,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
}

func (x *OrderAllotDetail) Reset() {
	*x = OrderAllotDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orderAllotService_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderAllotDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderAllotDetail) ProtoMessage() {}

func (x *OrderAllotDetail) ProtoReflect() protoreflect.Message {
	mi := &file_orderAllotService_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderAllotDetail.ProtoReflect.Descriptor instead.
func (*OrderAllotDetail) Descriptor() ([]byte, []int) {
	return file_orderAllotService_proto_rawDescGZIP(), []int{1}
}

func (x *OrderAllotDetail) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderAllotDetail) GetOrderAllotId() int64 {
	if x != nil {
		return x.OrderAllotId
	}
	return 0
}

func (x *OrderAllotDetail) GetRealstoreId() int64 {
	if x != nil {
		return x.RealstoreId
	}
	return 0
}

func (x *OrderAllotDetail) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *OrderAllotDetail) GetOrderDetailId() int64 {
	if x != nil {
		return x.OrderDetailId
	}
	return 0
}

func (x *OrderAllotDetail) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *OrderAllotDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *OrderAllotDetail) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *OrderAllotDetail) GetMd5Key() string {
	if x != nil {
		return x.Md5Key
	}
	return ""
}

func (x *OrderAllotDetail) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *OrderAllotDetail) GetUnitRate() float32 {
	if x != nil {
		return x.UnitRate
	}
	return 0
}

func (x *OrderAllotDetail) GetIsOpenWeight() string {
	if x != nil {
		return x.IsOpenWeight
	}
	return ""
}

func (x *OrderAllotDetail) GetBuyNumber() int64 {
	if x != nil {
		return x.BuyNumber
	}
	return 0
}

func (x *OrderAllotDetail) GetSalePrice() int64 {
	if x != nil {
		return x.SalePrice
	}
	return 0
}

func (x *OrderAllotDetail) GetPrice() int64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *OrderAllotDetail) GetSubtotalPrice() int64 {
	if x != nil {
		return x.SubtotalPrice
	}
	return 0
}

func (x *OrderAllotDetail) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *OrderAllotDetail) GetSpecWeight() int64 {
	if x != nil {
		return x.SpecWeight
	}
	return 0
}

func (x *OrderAllotDetail) GetSpecVolume() int64 {
	if x != nil {
		return x.SpecVolume
	}
	return 0
}

func (x *OrderAllotDetail) GetSpecCoding() string {
	if x != nil {
		return x.SpecCoding
	}
	return ""
}

func (x *OrderAllotDetail) GetSpecBarcode() string {
	if x != nil {
		return x.SpecBarcode
	}
	return ""
}

func (x *OrderAllotDetail) GetSpecDesc() string {
	if x != nil {
		return x.SpecDesc
	}
	return ""
}

func (x *OrderAllotDetail) GetSpec() []*SpecificationData {
	if x != nil {
		return x.Spec
	}
	return nil
}

func (x *OrderAllotDetail) GetCreatedAt() string {
	if x != nil {
		return x.CreatedAt
	}
	return ""
}

func (x *OrderAllotDetail) GetUpdatedAt() string {
	if x != nil {
		return x.UpdatedAt
	}
	return ""
}

type OrderAllotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paged       int64  `protobuf:"varint,1,opt,name=paged,proto3" json:"paged"`
	PageSize    int64  `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size"`
	Keywords    string `protobuf:"bytes,3,opt,name=keywords,proto3" json:"keywords"`
	Id          int32  `protobuf:"varint,4,opt,name=id,proto3" json:"id"`
	Title       string `protobuf:"bytes,5,opt,name=title,proto3" json:"title"`
	Model       string `protobuf:"bytes,6,opt,name=model,proto3" json:"model"`
	RealstoreId int64  `protobuf:"varint,7,opt,name=realstore_id,json=realstoreId,proto3" json:"realstore_id"`
	SpuId       int64  `protobuf:"varint,8,opt,name=spu_id,json=spuId,proto3" json:"spu_id"`
	OrderId     int64  `protobuf:"varint,9,opt,name=order_id,json=orderId,proto3" json:"order_id"`
	MemberId    int64  `protobuf:"varint,10,opt,name=member_id,json=memberId,proto3" json:"member_id"`
	UserId      int64  `protobuf:"varint,11,opt,name=user_id,json=userId,proto3" json:"user_id"`
	Status      string `protobuf:"bytes,15,opt,name=status,proto3" json:"status"`
	CreatedType string `protobuf:"bytes,16,opt,name=created_type,json=createdType,proto3" json:"created_type"`
	OrderType   string `protobuf:"bytes,17,opt,name=order_type,json=orderType,proto3" json:"order_type"`
}

func (x *OrderAllotRequest) Reset() {
	*x = OrderAllotRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orderAllotService_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderAllotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderAllotRequest) ProtoMessage() {}

func (x *OrderAllotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_orderAllotService_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderAllotRequest.ProtoReflect.Descriptor instead.
func (*OrderAllotRequest) Descriptor() ([]byte, []int) {
	return file_orderAllotService_proto_rawDescGZIP(), []int{2}
}

func (x *OrderAllotRequest) GetPaged() int64 {
	if x != nil {
		return x.Paged
	}
	return 0
}

func (x *OrderAllotRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

func (x *OrderAllotRequest) GetKeywords() string {
	if x != nil {
		return x.Keywords
	}
	return ""
}

func (x *OrderAllotRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *OrderAllotRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *OrderAllotRequest) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *OrderAllotRequest) GetRealstoreId() int64 {
	if x != nil {
		return x.RealstoreId
	}
	return 0
}

func (x *OrderAllotRequest) GetSpuId() int64 {
	if x != nil {
		return x.SpuId
	}
	return 0
}

func (x *OrderAllotRequest) GetOrderId() int64 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *OrderAllotRequest) GetMemberId() int64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *OrderAllotRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OrderAllotRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *OrderAllotRequest) GetCreatedType() string {
	if x != nil {
		return x.CreatedType
	}
	return ""
}

func (x *OrderAllotRequest) GetOrderType() string {
	if x != nil {
		return x.OrderType
	}
	return ""
}

type OrderAllotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Entity *OrderAllot   `protobuf:"bytes,1,opt,name=entity,proto3" json:"entity"`
	Pager  *common.Pager `protobuf:"bytes,2,opt,name=pager,proto3" json:"pager"`
	Items  []*OrderAllot `protobuf:"bytes,3,rep,name=items,proto3" json:"items"`
	Info   string        `protobuf:"bytes,4,opt,name=info,proto3" json:"info"`
}

func (x *OrderAllotResponse) Reset() {
	*x = OrderAllotResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_orderAllotService_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderAllotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderAllotResponse) ProtoMessage() {}

func (x *OrderAllotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_orderAllotService_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderAllotResponse.ProtoReflect.Descriptor instead.
func (*OrderAllotResponse) Descriptor() ([]byte, []int) {
	return file_orderAllotService_proto_rawDescGZIP(), []int{3}
}

func (x *OrderAllotResponse) GetEntity() *OrderAllot {
	if x != nil {
		return x.Entity
	}
	return nil
}

func (x *OrderAllotResponse) GetPager() *common.Pager {
	if x != nil {
		return x.Pager
	}
	return nil
}

func (x *OrderAllotResponse) GetItems() []*OrderAllot {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *OrderAllotResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

var File_orderAllotService_proto protoreflect.FileDescriptor

var file_orderAllotService_proto_rawDesc = []byte{
	0x0a, 0x17, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x1a, 0x11, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x62, 0x61, 0x73, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x72,
	0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x09, 0x0a, 0x0a, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x6c, 0x6c, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x74, 0x5f, 0x6e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x4e, 0x6f, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65,
	0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a,
	0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x62,
	0x75, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x62, 0x75, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x75, 0x79, 0x5f,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x62, 0x75, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x28, 0x0a, 0x10, 0x62, 0x75, 0x79, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x62, 0x75,
	0x79, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x72, 0x69,
	0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x63, 0x72, 0x65, 0x61,
	0x73, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2d, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x11, 0x70, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x74, 0x69, 0x61,
	0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x5f, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x73, 0x12,
	0x27, 0x0a, 0x0f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x65, 0x69, 0x76, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x72, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x6f, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x6f, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x31, 0x0a, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x52, 0x09, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x1e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x1f,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8b,
	0x06, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x61, 0x6c, 0x6c,
	0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61,
	0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0b, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x49, 0x64, 0x12,
	0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x64, 0x35,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x64, 0x35, 0x4b,
	0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x6e, 0x69, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x74, 0x5f, 0x72,
	0x61, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x74, 0x52,
	0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x77,
	0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x75, 0x79,
	0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x62,
	0x75, 0x79, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x61, 0x6c, 0x65,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x61,
	0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x25, 0x0a,
	0x0e, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x70,
	0x65, 0x63, 0x5f, 0x77, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0a, 0x73, 0x70, 0x65, 0x63, 0x57, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x70, 0x65, 0x63, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x56, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x73, 0x70, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x73, 0x70, 0x65, 0x63, 0x43, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x62, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x70, 0x65, 0x63, 0x42, 0x61, 0x72, 0x63, 0x6f, 0x64, 0x65,
	0x12, 0x1b, 0x0a, 0x09, 0x73, 0x70, 0x65, 0x63, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x65, 0x63, 0x44, 0x65, 0x73, 0x63, 0x12, 0x2f, 0x0a,
	0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x83, 0x03, 0x0a,
	0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61, 0x67, 0x65,
	0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x70, 0x61, 0x67,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x49, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x73, 0x70, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x73, 0x70, 0x75, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x22, 0xa7, 0x01, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x52,
	0x06, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x23, 0x0a, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x50, 0x61, 0x67, 0x65, 0x72, 0x52, 0x05, 0x70, 0x61, 0x67, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f,
	0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x32, 0x93, 0x03, 0x0a,
	0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x3c, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c,
	0x6f, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x3c, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74,
	0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c,
	0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x1a, 0x1c,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41,
	0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x06,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x1a, 0x1c, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c,
	0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x43, 0x0a,
	0x06, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x12, 0x1b, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x73, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2e,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x0d, 0x5a, 0x0b, 0x2f, 0x2e, 0x3b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_orderAllotService_proto_rawDescOnce sync.Once
	file_orderAllotService_proto_rawDescData = file_orderAllotService_proto_rawDesc
)

func file_orderAllotService_proto_rawDescGZIP() []byte {
	file_orderAllotService_proto_rawDescOnce.Do(func() {
		file_orderAllotService_proto_rawDescData = protoimpl.X.CompressGZIP(file_orderAllotService_proto_rawDescData)
	})
	return file_orderAllotService_proto_rawDescData
}

var file_orderAllotService_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_orderAllotService_proto_goTypes = []interface{}{
	(*OrderAllot)(nil),         // 0: services.OrderAllot
	(*OrderAllotDetail)(nil),   // 1: services.OrderAllotDetail
	(*OrderAllotRequest)(nil),  // 2: services.OrderAllotRequest
	(*OrderAllotResponse)(nil), // 3: services.OrderAllotResponse
	(*Realstore)(nil),          // 4: services.Realstore
	(*SpecificationData)(nil),  // 5: services.SpecificationData
	(*common.Pager)(nil),       // 6: common.Pager
}
var file_orderAllotService_proto_depIdxs = []int32{
	4,  // 0: services.OrderAllot.realstore:type_name -> services.Realstore
	1,  // 1: services.OrderAllot.details:type_name -> services.OrderAllotDetail
	5,  // 2: services.OrderAllotDetail.spec:type_name -> services.SpecificationData
	0,  // 3: services.OrderAllotResponse.entity:type_name -> services.OrderAllot
	6,  // 4: services.OrderAllotResponse.pager:type_name -> common.Pager
	0,  // 5: services.OrderAllotResponse.items:type_name -> services.OrderAllot
	0,  // 6: services.OrderAllotService.Create:input_type -> services.OrderAllot
	0,  // 7: services.OrderAllotService.Update:input_type -> services.OrderAllot
	0,  // 8: services.OrderAllotService.Delete:input_type -> services.OrderAllot
	0,  // 9: services.OrderAllotService.Detail:input_type -> services.OrderAllot
	2,  // 10: services.OrderAllotService.List:input_type -> services.OrderAllotRequest
	2,  // 11: services.OrderAllotService.Search:input_type -> services.OrderAllotRequest
	3,  // 12: services.OrderAllotService.Create:output_type -> services.OrderAllotResponse
	3,  // 13: services.OrderAllotService.Update:output_type -> services.OrderAllotResponse
	3,  // 14: services.OrderAllotService.Delete:output_type -> services.OrderAllotResponse
	3,  // 15: services.OrderAllotService.Detail:output_type -> services.OrderAllotResponse
	3,  // 16: services.OrderAllotService.List:output_type -> services.OrderAllotResponse
	3,  // 17: services.OrderAllotService.Search:output_type -> services.OrderAllotResponse
	12, // [12:18] is the sub-list for method output_type
	6,  // [6:12] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_orderAllotService_proto_init() }
func file_orderAllotService_proto_init() {
	if File_orderAllotService_proto != nil {
		return
	}
	file_baseInfoService_proto_init()
	file_realstoreService_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_orderAllotService_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderAllot); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orderAllotService_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderAllotDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orderAllotService_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderAllotRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_orderAllotService_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderAllotResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_orderAllotService_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_orderAllotService_proto_goTypes,
		DependencyIndexes: file_orderAllotService_proto_depIdxs,
		MessageInfos:      file_orderAllotService_proto_msgTypes,
	}.Build()
	File_orderAllotService_proto = out.File
	file_orderAllotService_proto_rawDesc = nil
	file_orderAllotService_proto_goTypes = nil
	file_orderAllotService_proto_depIdxs = nil
}
