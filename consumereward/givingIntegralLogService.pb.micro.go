// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: givingIntegralLogService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for GivingIntegralLogService service

func NewGivingIntegralLogServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for GivingIntegralLogService service

type GivingIntegralLogService interface {
	Detail(ctx context.Context, in *GivingIntegralLog, opts ...client.CallOption) (*GivingIntegralLogResponse, error)
	Search(ctx context.Context, in *GivingIntegralLogRequest, opts ...client.CallOption) (*GivingIntegralLogResponse, error)
}

type givingIntegralLogService struct {
	c    client.Client
	name string
}

func NewGivingIntegralLogService(name string, c client.Client) GivingIntegralLogService {
	return &givingIntegralLogService{
		c:    c,
		name: name,
	}
}

func (c *givingIntegralLogService) Detail(ctx context.Context, in *GivingIntegralLog, opts ...client.CallOption) (*GivingIntegralLogResponse, error) {
	req := c.c.NewRequest(c.name, "GivingIntegralLogService.Detail", in)
	out := new(GivingIntegralLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *givingIntegralLogService) Search(ctx context.Context, in *GivingIntegralLogRequest, opts ...client.CallOption) (*GivingIntegralLogResponse, error) {
	req := c.c.NewRequest(c.name, "GivingIntegralLogService.Search", in)
	out := new(GivingIntegralLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for GivingIntegralLogService service

type GivingIntegralLogServiceHandler interface {
	Detail(context.Context, *GivingIntegralLog, *GivingIntegralLogResponse) error
	Search(context.Context, *GivingIntegralLogRequest, *GivingIntegralLogResponse) error
}

func RegisterGivingIntegralLogServiceHandler(s server.Server, hdlr GivingIntegralLogServiceHandler, opts ...server.HandlerOption) error {
	type givingIntegralLogService interface {
		Detail(ctx context.Context, in *GivingIntegralLog, out *GivingIntegralLogResponse) error
		Search(ctx context.Context, in *GivingIntegralLogRequest, out *GivingIntegralLogResponse) error
	}
	type GivingIntegralLogService struct {
		givingIntegralLogService
	}
	h := &givingIntegralLogServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&GivingIntegralLogService{h}, opts...))
}

type givingIntegralLogServiceHandler struct {
	GivingIntegralLogServiceHandler
}

func (h *givingIntegralLogServiceHandler) Detail(ctx context.Context, in *GivingIntegralLog, out *GivingIntegralLogResponse) error {
	return h.GivingIntegralLogServiceHandler.Detail(ctx, in, out)
}

func (h *givingIntegralLogServiceHandler) Search(ctx context.Context, in *GivingIntegralLogRequest, out *GivingIntegralLogResponse) error {
	return h.GivingIntegralLogServiceHandler.Search(ctx, in, out)
}
