// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: reductionService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ReductionService service

func NewReductionServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ReductionService service

type ReductionService interface {
	Create(ctx context.Context, in *Reduction, opts ...client.CallOption) (*ReductionResponse, error)
	Update(ctx context.Context, in *Reduction, opts ...client.CallOption) (*ReductionResponse, error)
	Delete(ctx context.Context, in *Reduction, opts ...client.CallOption) (*ReductionResponse, error)
	Stop(ctx context.Context, in *Reduction, opts ...client.CallOption) (*ReductionResponse, error)
	Detail(ctx context.Context, in *Reduction, opts ...client.CallOption) (*ReductionResponse, error)
	Search(ctx context.Context, in *ReductionRequest, opts ...client.CallOption) (*ReductionResponse, error)
	List(ctx context.Context, in *ReductionRequest, opts ...client.CallOption) (*ReductionResponse, error)
}

type reductionService struct {
	c    client.Client
	name string
}

func NewReductionService(name string, c client.Client) ReductionService {
	return &reductionService{
		c:    c,
		name: name,
	}
}

func (c *reductionService) Create(ctx context.Context, in *Reduction, opts ...client.CallOption) (*ReductionResponse, error) {
	req := c.c.NewRequest(c.name, "ReductionService.Create", in)
	out := new(ReductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reductionService) Update(ctx context.Context, in *Reduction, opts ...client.CallOption) (*ReductionResponse, error) {
	req := c.c.NewRequest(c.name, "ReductionService.Update", in)
	out := new(ReductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reductionService) Delete(ctx context.Context, in *Reduction, opts ...client.CallOption) (*ReductionResponse, error) {
	req := c.c.NewRequest(c.name, "ReductionService.Delete", in)
	out := new(ReductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reductionService) Stop(ctx context.Context, in *Reduction, opts ...client.CallOption) (*ReductionResponse, error) {
	req := c.c.NewRequest(c.name, "ReductionService.Stop", in)
	out := new(ReductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reductionService) Detail(ctx context.Context, in *Reduction, opts ...client.CallOption) (*ReductionResponse, error) {
	req := c.c.NewRequest(c.name, "ReductionService.Detail", in)
	out := new(ReductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reductionService) Search(ctx context.Context, in *ReductionRequest, opts ...client.CallOption) (*ReductionResponse, error) {
	req := c.c.NewRequest(c.name, "ReductionService.Search", in)
	out := new(ReductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reductionService) List(ctx context.Context, in *ReductionRequest, opts ...client.CallOption) (*ReductionResponse, error) {
	req := c.c.NewRequest(c.name, "ReductionService.List", in)
	out := new(ReductionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ReductionService service

type ReductionServiceHandler interface {
	Create(context.Context, *Reduction, *ReductionResponse) error
	Update(context.Context, *Reduction, *ReductionResponse) error
	Delete(context.Context, *Reduction, *ReductionResponse) error
	Stop(context.Context, *Reduction, *ReductionResponse) error
	Detail(context.Context, *Reduction, *ReductionResponse) error
	Search(context.Context, *ReductionRequest, *ReductionResponse) error
	List(context.Context, *ReductionRequest, *ReductionResponse) error
}

func RegisterReductionServiceHandler(s server.Server, hdlr ReductionServiceHandler, opts ...server.HandlerOption) error {
	type reductionService interface {
		Create(ctx context.Context, in *Reduction, out *ReductionResponse) error
		Update(ctx context.Context, in *Reduction, out *ReductionResponse) error
		Delete(ctx context.Context, in *Reduction, out *ReductionResponse) error
		Stop(ctx context.Context, in *Reduction, out *ReductionResponse) error
		Detail(ctx context.Context, in *Reduction, out *ReductionResponse) error
		Search(ctx context.Context, in *ReductionRequest, out *ReductionResponse) error
		List(ctx context.Context, in *ReductionRequest, out *ReductionResponse) error
	}
	type ReductionService struct {
		reductionService
	}
	h := &reductionServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ReductionService{h}, opts...))
}

type reductionServiceHandler struct {
	ReductionServiceHandler
}

func (h *reductionServiceHandler) Create(ctx context.Context, in *Reduction, out *ReductionResponse) error {
	return h.ReductionServiceHandler.Create(ctx, in, out)
}

func (h *reductionServiceHandler) Update(ctx context.Context, in *Reduction, out *ReductionResponse) error {
	return h.ReductionServiceHandler.Update(ctx, in, out)
}

func (h *reductionServiceHandler) Delete(ctx context.Context, in *Reduction, out *ReductionResponse) error {
	return h.ReductionServiceHandler.Delete(ctx, in, out)
}

func (h *reductionServiceHandler) Stop(ctx context.Context, in *Reduction, out *ReductionResponse) error {
	return h.ReductionServiceHandler.Stop(ctx, in, out)
}

func (h *reductionServiceHandler) Detail(ctx context.Context, in *Reduction, out *ReductionResponse) error {
	return h.ReductionServiceHandler.Detail(ctx, in, out)
}

func (h *reductionServiceHandler) Search(ctx context.Context, in *ReductionRequest, out *ReductionResponse) error {
	return h.ReductionServiceHandler.Search(ctx, in, out)
}

func (h *reductionServiceHandler) List(ctx context.Context, in *ReductionRequest, out *ReductionResponse) error {
	return h.ReductionServiceHandler.List(ctx, in, out)
}
