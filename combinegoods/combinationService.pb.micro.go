// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: combinationService.proto

package services

import (
	fmt "fmt"
	_ "github.com/geiqin/micro-kit/protobuf/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for CombinationService service

func NewCombinationServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for CombinationService service

type CombinationService interface {
	Create(ctx context.Context, in *Combination, opts ...client.CallOption) (*CombinationResponse, error)
	Update(ctx context.Context, in *Combination, opts ...client.CallOption) (*CombinationResponse, error)
	Delete(ctx context.Context, in *Combination, opts ...client.CallOption) (*CombinationResponse, error)
	Stop(ctx context.Context, in *Combination, opts ...client.CallOption) (*CombinationResponse, error)
	Detail(ctx context.Context, in *Combination, opts ...client.CallOption) (*CombinationResponse, error)
	Search(ctx context.Context, in *CombinationRequest, opts ...client.CallOption) (*CombinationResponse, error)
	List(ctx context.Context, in *CombinationRequest, opts ...client.CallOption) (*CombinationResponse, error)
}

type combinationService struct {
	c    client.Client
	name string
}

func NewCombinationService(name string, c client.Client) CombinationService {
	return &combinationService{
		c:    c,
		name: name,
	}
}

func (c *combinationService) Create(ctx context.Context, in *Combination, opts ...client.CallOption) (*CombinationResponse, error) {
	req := c.c.NewRequest(c.name, "CombinationService.Create", in)
	out := new(CombinationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combinationService) Update(ctx context.Context, in *Combination, opts ...client.CallOption) (*CombinationResponse, error) {
	req := c.c.NewRequest(c.name, "CombinationService.Update", in)
	out := new(CombinationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combinationService) Delete(ctx context.Context, in *Combination, opts ...client.CallOption) (*CombinationResponse, error) {
	req := c.c.NewRequest(c.name, "CombinationService.Delete", in)
	out := new(CombinationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combinationService) Stop(ctx context.Context, in *Combination, opts ...client.CallOption) (*CombinationResponse, error) {
	req := c.c.NewRequest(c.name, "CombinationService.Stop", in)
	out := new(CombinationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combinationService) Detail(ctx context.Context, in *Combination, opts ...client.CallOption) (*CombinationResponse, error) {
	req := c.c.NewRequest(c.name, "CombinationService.Detail", in)
	out := new(CombinationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combinationService) Search(ctx context.Context, in *CombinationRequest, opts ...client.CallOption) (*CombinationResponse, error) {
	req := c.c.NewRequest(c.name, "CombinationService.Search", in)
	out := new(CombinationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *combinationService) List(ctx context.Context, in *CombinationRequest, opts ...client.CallOption) (*CombinationResponse, error) {
	req := c.c.NewRequest(c.name, "CombinationService.List", in)
	out := new(CombinationResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CombinationService service

type CombinationServiceHandler interface {
	Create(context.Context, *Combination, *CombinationResponse) error
	Update(context.Context, *Combination, *CombinationResponse) error
	Delete(context.Context, *Combination, *CombinationResponse) error
	Stop(context.Context, *Combination, *CombinationResponse) error
	Detail(context.Context, *Combination, *CombinationResponse) error
	Search(context.Context, *CombinationRequest, *CombinationResponse) error
	List(context.Context, *CombinationRequest, *CombinationResponse) error
}

func RegisterCombinationServiceHandler(s server.Server, hdlr CombinationServiceHandler, opts ...server.HandlerOption) error {
	type combinationService interface {
		Create(ctx context.Context, in *Combination, out *CombinationResponse) error
		Update(ctx context.Context, in *Combination, out *CombinationResponse) error
		Delete(ctx context.Context, in *Combination, out *CombinationResponse) error
		Stop(ctx context.Context, in *Combination, out *CombinationResponse) error
		Detail(ctx context.Context, in *Combination, out *CombinationResponse) error
		Search(ctx context.Context, in *CombinationRequest, out *CombinationResponse) error
		List(ctx context.Context, in *CombinationRequest, out *CombinationResponse) error
	}
	type CombinationService struct {
		combinationService
	}
	h := &combinationServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&CombinationService{h}, opts...))
}

type combinationServiceHandler struct {
	CombinationServiceHandler
}

func (h *combinationServiceHandler) Create(ctx context.Context, in *Combination, out *CombinationResponse) error {
	return h.CombinationServiceHandler.Create(ctx, in, out)
}

func (h *combinationServiceHandler) Update(ctx context.Context, in *Combination, out *CombinationResponse) error {
	return h.CombinationServiceHandler.Update(ctx, in, out)
}

func (h *combinationServiceHandler) Delete(ctx context.Context, in *Combination, out *CombinationResponse) error {
	return h.CombinationServiceHandler.Delete(ctx, in, out)
}

func (h *combinationServiceHandler) Stop(ctx context.Context, in *Combination, out *CombinationResponse) error {
	return h.CombinationServiceHandler.Stop(ctx, in, out)
}

func (h *combinationServiceHandler) Detail(ctx context.Context, in *Combination, out *CombinationResponse) error {
	return h.CombinationServiceHandler.Detail(ctx, in, out)
}

func (h *combinationServiceHandler) Search(ctx context.Context, in *CombinationRequest, out *CombinationResponse) error {
	return h.CombinationServiceHandler.Search(ctx, in, out)
}

func (h *combinationServiceHandler) List(ctx context.Context, in *CombinationRequest, out *CombinationResponse) error {
	return h.CombinationServiceHandler.List(ctx, in, out)
}
